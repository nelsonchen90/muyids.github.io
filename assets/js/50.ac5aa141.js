(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{501:function(t,r,a){"use strict";a.r(r);var l=a(42),s=Object(l.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"最小生成树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树"}},[t._v("#")]),t._v(" 最小生成树")]),t._v(" "),a("p",[t._v("最小生成树处理的是无向图")]),t._v(" "),a("h2",{attrs:{id:"常用的两个算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的两个算法"}},[t._v("#")]),t._v(" 常用的两个算法")]),t._v(" "),a("ul",[a("li",[t._v("Prim算法（普利姆算法）\n"),a("ul",[a("li",[t._v("朴素版Prim O(n^2) 稠密图✅")]),t._v(" "),a("li",[t._v("堆优化Prim O(mlog n) 不常用❎")])])]),t._v(" "),a("li",[t._v("Kruskal算法 (克鲁斯卡尔算法) O(mlogm) 稀疏图✅")])]),t._v(" "),a("p",[t._v("稀疏图用Kruskal算法，稠密图用朴素版Prim算法，堆优化版Prim算法一般不会用")]),t._v(" "),a("h2",{attrs:{id:"二分图的判定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二分图的判定"}},[t._v("#")]),t._v(" 二分图的判定")]),t._v(" "),a("ul",[a("li",[t._v("染色法 O(n+m)\n"),a("ul",[a("li",[t._v("判断能否被二染色")])])]),t._v(" "),a("li",[t._v("匈牙利算法 O(mn),实际运行时间一般远小于O(mn)\n"),a("ul",[a("li",[t._v("求二分图的最大匹配")])])])])])}),[],!1,null,null,null);r.default=s.exports}}]);