(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{536:function(s,n,a){"use strict";a.r(n);var e=a(42),r=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("DOT语言学习笔记")]),s._v(" "),a("p",[s._v("设置点和线的形状与颜色")]),s._v(" "),a("p",[s._v("digraph是有向图，graph是无向图。要注意，->和--都表示图中的一条边，但是前者用于有向图中，而后者用于无向图中，不能混用。")]),s._v(" "),a("p",[s._v("代码示例")]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("digraph G{\n    main -> parse -> execute\n    main -> init\n    main -> cleanup\n    execute -> make_string\n    execute -> printf\n    init -> make_string\n    main -> printf\n    execute -> compare\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("然后在命令行(cmd)中运行此文件，")]),s._v(" "),a("p",[s._v("dot -T输出格式 程序文件名.dot -o 输出文件名.输出格式")]),s._v(" "),a("p",[s._v("我们可以手动设置图的属性，即设置图中边的属性与图中点的属性。")]),s._v(" "),a("p",[s._v("我们可以在每条边后面添加中括号，在其中设置边的相关属性，也可以使用edge设置边的默认值。点的属性设置方法相同，node表示点的默认值。")]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('digraph G{\n    size = "4, 4"  /*设置图片尺寸为4 * 4（英寸）*/\n    main[shape = box] /*设置点main形状为矩形，默认为椭圆形*/\n    main -> parse[weight = 8]  /*设置main到parse的边的重要程度，默认为1*/\n    parse -> execute\n    main -> init[style = dotted] /*设置main到init的边的样式为点，默认为实线*/\n    main -> cleanup\n    execute -> {make_string printf} /*一次连接两条边，以隔开目标点*/\n    init -> make_string\n    edge[color = red]  /*将此语句后的边的颜色设置为红色*/\n    main -> printf[style = bold, label = "100 times"]\n    node[shape = box, style = filled, color = ".7 .3 1.0"] /*设置此语句后的点的默认属性， 其中color的值采用RGB标准*/\n    make_string[label = "make a\\nstring"]\n    execute -> compare\n    compare -> return\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("此外，还可以使用dir设置每条边的箭头方向，有forward(default),back,both,nonc，分别表示前向，反向，双向和无。如下所示：")]),s._v(" "),a("div",{staticClass:"language-digraph line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("digraph G{\n    A -> B[dir = both]\n    B -> C[dir = nonc]\n    C -> D[dir = back]\n    D -> A[dir = forward]\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("点的属性除了record和Mrecord这两种之外，其他的形状都是多边形，而我们可以对多边形进行设置。sides用于设置边数，peripheries用于设置多边形外框的层数，"),a("code",[s._v("regular = true")]),s._v("可以使你的多边形是一个规则的多边形，"),a("code",[s._v("orientation = *")]),s._v("可以让你的多边形旋转*角度，skew后面跟一个（-1.0~1.0）的小数，能使你的图形斜切一个角度，distortion则可以令你的图形产生透视效果。")]),s._v(" "),a("div",{staticClass:"language-digraph line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('digraph G{\n    a -> b -> c\n    b -> d \n    a[shape = polygon, sides = 5, peripheries = 3, color = lightblue, style = filled]\n    c[shape = polygon, sides = 4, skew = 0.4, label = "hello world"]\n    d[shape = invtriangle]\n    e[shape = polygon, sizes = 4, distortion = .7]\n}\n\ndigraph G{\n    A -> B\n    A[orientation = 15, regular = true, shape = polygon, sides = 8,\n     peripheries = 4, color = red, style = filled]\n    B[shape = polygon, sides = 4, skew = 0.5, color = blue]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("record与Mrecord的区别就是Mrecord的角是圆的，而record是由横竖的矩形组成的图形。")]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('digraph G{\n   node[shape = record]\n   struct1[label = "<f0> left | <f1> middle | <f2> right"]\n   struct2[label = "<f0> one | <f1> two"]\n   struct3[label = "hello \\nworld | {b | {c | <here> d | e} | f} | g | h"]\n   struct1 -> struct2\n   struct1 -> struct3\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("当你的线与线的label较多时，可以设置线的属性decorate=true使得每条线与其属性之间产生连线。你还可以为每条线设置属性headlabel，taillabel，给每条线的起始点和终点设置属性，它们的颜色由labelfontcolor决定，而label的颜色由fontcolor来决定。")]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('graph G{\n   label = "我爱你" /*为图设置标签*/\n   labelloc = b    /*图标签的位置在底部，也可以设置为r到顶部*/\n   labeljust = l   /*图标签的位置在左边，也可以设置为r到右边*/\n\n   edge[decorate = true]\n   C -- D[label = "s1"]\n   C -- E[label = "s2"]\n   C -- F[label = "s3"]\n   D -- E[label = "s4"]\n   D -- F[label = "s5"]\n\n   edge[decorate = false, labelfontcolor = blue, fontcolor = red]\n   C1 -- D1[headlabel = "d1", taillabel = "c1", label = "c1 - d1"]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v('在dot语言中，我们可以使用html语言制作表格。在label后添加<>，而不是""就能添加html语言。')]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('digraph struct {\n   abc[shape=none, margin=0, label=<\n   <TABLE BORDER = "0" CELLBORDER = "1" CELLSPACING = "0" CELLPADDING = "4">\n   <TR><TD ROWSPAN = "3"><FONT COLOR = "red">hello</FONT><BR/>world</TD>\n   <TD COLSPAN = "3">b</TD>\n   <TD ROWSPAN = "3" BGCCOLOR = "lightgrey">g</TD>\n   <TD ROWSPAN = "3">h</TD>\n   </TR>\n   <TR><TD>c</TD>\n   <TD PORT = "here">d</TD>\n   <TD>e</TD>\n   </TR>\n   <TR><TD COLSPAN = "3">f</TD>\n   </TR>\n   </TABLE>\n   >]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("设置点，线的位置以及子图的概念\n图中的线默认是从上往下的，我们可以通过在文件的最上层设置rankdir=LR将其改为从左往右。同理，rankdir可以设置为TB(默认),BT,RL。")]),s._v(" "),a("p",[s._v("当图中时间表之类的东西时，我们可能需要点排列成一行（列），这时我们就需要rank，在花括号中设置rank=same，然后将需要并排的点一次输入。")]),s._v(" "),a("p",[s._v("排列对齐")]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("digraph G{\n   rankdir = LR\n   {\n    node[shape = plaintext]\n    1995 -> 1996 -> 1997 -> 1998 -> 1999 -> 2000 -> 2001\n   }\n   {\n    node[shape = box, style = filled]\n    WAR3 -> Xhero -> Footman -> DOTA\n    WAR3 -> Battleship\n   }\n   {\n    {rank = same 1996 WAR3}\n    {rank = same 1998 Xhero Battleship}\n    {rank = same 1999 Footman}\n    {rank = same 2001 DOTA}\n   }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v('设立一条边时，我们可以制定这条边从起点的哪个位置出发，到终点的哪个位置结束。控制符有"n","ne","e","se","s","sw","w"和"nw"，具体效果见下：')]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("digraph G{\n   node[shape = box]\n   c:n -> d[label = n]\n   c1:ne -> d1[label = ne]\n   c2:e -> d2[label = e]\n   c3:se -> d3[label = se]\n   c4:s -> d4[label = s]\n   c5:sw -> d5[label = sw]\n   c6:w -> d6[label = w]\n   c7:nw -> d7[label = nw]\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("我们也可以在record中给点定义一些port，以确定record中哪个部分用于连线。")]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('digraph G{\n   label = "Binary Search Tree"\n   node[shape = record]\n   A[label = "<f0> | <f1> A | <f2>"]\n   B[label = "<f0> | <f1> B | <f2>"]\n   C[label = "<f0> | <f1> C | <f2>"]\n   D[label = "<f0> | <f1> D | <f2>"]\n   E[label = "<f0> | <f1> E | <f2>"]\n   A: f0: sw -> B: f1\n   A: f2: se -> C: f1\n   B: f0: sw -> D: f1\n   B: f2: se -> E: f1\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("我们可以借此构建一个Hash表。")]),s._v(" "),a("div",{staticClass:"language-graphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('digraph G{\n    nodesep = .05\n    rankdir = LR\n    node[shape = record, width = .1, height = .1]\n\n    node0[label = "<f0> | <f1> | <f2> | <f3> | <f4> | <f5> | <f6>",height = 2.5]\n\n    node[width = 1.5]\n\n    node1[label = "{<n> n14 | 719 | <p>}"]\n    node2[label = "{<n> a1 | 805 | <p>}"]\n    node3[label = "{<n> i9 | 718 | <p>}"]\n    node4[label = "{<n> e5 | 989 | <p>}"]\n    node5[label = "{<n> t20 | 959 | <p>}"]\n    node6[label = "{<n> o15 | 794 | <p>}"]\n    node7[label = "{<n> s19 | 659 | <p>}"]\n\n    node0: f0 -> node1: n\n    node0: f1 -> node2: n\n    node0: f2 -> node3: n\n    node0: f5 -> node4: n\n    node0: f6 -> node5: n\n    node2: p -> node6: n\n    node4: p -> node7: n\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v('画一个子图就是subgraph cluster#，必须有clutser前缀。这里"#"代表任意字符，当然为了便于区分，最好将"#"设置为非英文字母。')]),s._v(" "),a("div",{staticClass:"language-digraphviz line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('digraph G{\n    subgraph cluster1{\n       node[style = filled, color = white]\n       style = filled\n       color = lightgrey\n       a0 -> a1 -> a2 -> a3\n       label = "process1"\n    }\n\n    subgraph cluster2{\n        node[style = filled]\n        color = blue\n        b0 -> b1 -> b2 -> b3\n        label = "process2"\n    }\n    start -> a0\n    start -> b0\n    a1 -> b3\n    b2 -> a3\n    a3 -> a0\n    a3 -> end\n    b3 -> end\n    start[shape = Mdiamond]\n    end[shape = Msquare]\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("如果你想将一条边连到一个子图的边界上，先输入compound=true，然后就能用lhead和ltail设置连接的子图。")]),s._v(" "),a("p",[s._v("附录")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://www.graphviz.org/doc/info/attrs.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("点，边和图的属性"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://www.graphviz.org/doc/info/shapes.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("点的形状"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://www.graphviz.org/doc/info/colors.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("颜色设置"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=r.exports}}]);