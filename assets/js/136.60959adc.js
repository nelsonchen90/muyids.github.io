(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{486:function(s,a,n){"use strict";n.r(a);var e=n(42),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[n("code",[s._v("设计模式")]),s._v("是对普遍存在问题提出的常规的、可复用的解决方案。")]),s._v(" "),n("p",[s._v("设计模式的本质是"),n("code",[s._v("简约和美")])]),s._v(" "),n("h2",{attrs:{id:"单例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单例"}},[s._v("#")]),s._v(" 单例")]),s._v(" "),n("p",[s._v("任意对象都是单例，无须特别处理")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var obj = {name: 'michaelqin', age: 30};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"工厂"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂"}},[s._v("#")]),s._v(" 工厂")]),s._v(" "),n("p",[s._v("同样形式参数返回不同的实例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function Person() { this.name = 'Person1'; }\nfunction Animal() { this.name = 'Animal1'; }\nfunction Factory() {}\nFactory.prototype.getInstance = function(className) {\n    return eval('new ' + className + '()');\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h2",{attrs:{id:"单例-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单例-2"}},[s._v("#")]),s._v(" 单例")]),s._v(" "),n("p",[s._v("单例模式确保一个类只有一个实例。 因为 require 机制，Node.js 中创建单例很方便。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//area.js\nvar PI = Math.PI;\n\nfunction circle (radius) {  \n  return radius * radius * PI;\n}\n\nmodule.exports.circle = circle;  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("应用中无论 require 多少次此模块，它都只存在一个实例。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var areaCalc = require('./area');\n\nconsole.log(areaCalc.circle(5));  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("基于 require 的运行机制，单例可能是 NPM 模块中最普遍的 Node.js 设计模式。")]),s._v(" "),n("h2",{attrs:{id:"观察者模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[s._v("#")]),s._v(" 观察者模式")]),s._v(" "),n("p",[s._v("观察者模式在对象间定义一个一对多的关联，当状态发生改变时，自动通知其他关联对象。\nNode.js 中可以使用 EventEmitter 使用观察者模式。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// MyFancyObservable.js\nvar util = require('util');  \nvar EventEmitter = require('events').EventEmitter;\n\nfunction MyFancyObservable() {  \n  EventEmitter.call(this);\n}\n\nutil.inherits(MyFancyObservable, EventEmitter);  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("上面的代码创建了一个可观察的对象，再给它添加一些功能：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("MyFancyObservable.prototype.hello = function (name) {  \n  this.emit('hello', name);\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("现在这个对象可以发射事件了：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var MyFancyObservable = require('MyFancyObservable');  \nvar observable = new MyFancyObservable();\n\nobservable.on('hello', function (name) {  \n  console.log(name);\n});\n\nobservable.hello('john');  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[s._v("#")]),s._v(" 工厂模式")]),s._v(" "),n("p",[s._v("工厂模式为"),n("strong",[s._v("创建对象定义一个通用接口")]),s._v("，这种创建模式创建对象时不需要直接掉用构造函数。该模式对于复杂的创建流程非常有用。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function MyClass (options) {  \n  this.options = options;\n}\n\nfunction create(options) {  \n  // modify the options here if you want\n  return new MyClass(options);\n}\n\nmodule.exports.create = create; \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("工厂模式使测试更加简单，因为可以使用此方式注入模块依赖。")]),s._v(" "),n("h2",{attrs:{id:"依赖注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[s._v("#")]),s._v(" 依赖注入")]),s._v(" "),n("p",[n("strong",[s._v("依赖注入是一种一个或多个依赖（或者服务）注入或者通过引用传递到一个依赖的对象中的设计模式。")])]),s._v(" "),n("p",[s._v("下面的例子中，我们将创建一个返回一个数据库依赖的 UserModel。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function userModel (options) {  \n  var db;\n\n  if (!options.db) {\n    throw new Error('Options.db is required');\n  }\n\n  db = options.db;\n\n  return {\n    create: function (done) {\n      db.query('INSERT ...', done);\n    }\n  }\n}\n\nmodule.exports = userModel;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("p",[s._v("然后用它创建一个实例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var db = require('./db');\n\nvar userModel = require('User')({  \n  db: db\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("这种模式对于测试很有用，编写单元测试的时候可以方便地把假数据传入模型中。")]),s._v(" "),n("h2",{attrs:{id:"中间件-管道"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中间件-管道"}},[s._v("#")]),s._v(" 中间件/管道")]),s._v(" "),n("p",[n("strong",[s._v("中间件是一个简单但强大的概念：一个单元/函数输出的结果是下一个的输入。")]),s._v("\nExpress 和 Koa 都使用了中间件。")]),s._v(" "),n("p",[s._v("我们来了解一下 Koa 的实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("app.use = function(fn){  \n  this.middleware.push(fn);\n  return this;\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("添加中间件时只需要将其 push 到中间件数组中，当请求发送到服务器时，中间件会一个接一个地被调用：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var i = middleware.length;  \nwhile (i--) {  \n  next = middleware[i].call(this, next);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"数据流（streams）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据流（streams）"}},[s._v("#")]),s._v(" 数据流（Streams）")]),s._v(" "),n("p",[s._v("可以把数据流想象成某种特殊的管道。数据流适合用于处理大量字节数据。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("process.stdin.on('readable', function () {  \n    var buf = process.stdin.read(3);\n    console.dir(buf);\n    process.stdin.read(0);\n});\n$ (echo abc; sleep 1; echo def; sleep 1; echo ghi) | node consume2.js \n<Buffer 61 62 63>  \n<Buffer 0a 64 65>  \n<Buffer 66 0a 67>  \n<Buffer 68 69 0a>  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);