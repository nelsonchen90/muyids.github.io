(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{492:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"为什么用node-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么用node-js"}},[t._v("#")]),t._v(" 为什么用Node.js")]),t._v(" "),a("ul",[a("li",[t._v("简单强大，轻量可扩展")]),t._v(" "),a("li",[t._v("javascript,json来进行编码,web开发必备技能")]),t._v(" "),a("li",[t._v("非阻塞IO,可以适应分块传输数据，较慢的网络环境，尤其擅长高并发访问")]),t._v(" "),a("li",[t._v("前后端使用统一语言")]),t._v(" "),a("li",[t._v("可扩展体现在可以轻松应对"),a("strong",[t._v("多实例，多服务器架构")]),t._v("，同时有海量的第三方应用组件")])]),t._v(" "),a("h2",{attrs:{id:"事件循环和非阻塞io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环和非阻塞io"}},[t._v("#")]),t._v(" 事件循环和非阻塞IO")]),t._v(" "),a("h3",{attrs:{id:"单线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单线程"}},[t._v("#")]),t._v(" 单线程")]),t._v(" "),a("ul",[a("li",[t._v("传统web服务中，大多都是使用多线程机制来解决并发的问题，原因是I/O事件会阻塞线程，而阻塞就意味着要等待")]),t._v(" "),a("li",[t._v("node的设计是采用了单线程的机制，只是针对 主线程来说，即每个node进程只有一个主线程来执行程序代码")]),t._v(" "),a("li",[t._v("采用了"),a("strong",[t._v("事件驱动")]),t._v("的机制，将耗时阻塞的I/O操作交给线程池中的某个线程去完成")]),t._v(" "),a("li",[t._v("主线程本身只负责不断地调度，并没有执行真正的I/O操作。也就是说node实现的是异步非阻塞式。")])]),t._v(" "),a("p",[t._v("底层，Node.js借助libuv来作为抽象封装层，从而屏蔽不同操作系统的差异")]),t._v(" "),a("p",[t._v("libuv: linux下用libev实现，Windows下用IOCP实现")]),t._v(" "),a("p",[a("strong",[t._v("IO多路复用模型")])]),t._v(" "),a("h3",{attrs:{id:"事件循环机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制"}},[t._v("#")]),t._v(" 事件循环机制")]),t._v(" "),a("p",[t._v("根据node的官方介绍，node每次事件循环机制都包含了6个阶段：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("timers阶段")]),t._v("：这个阶段执行已经到期的timer(setTimeout、setInterval)回调")]),t._v(" "),a("li",[a("strong",[t._v("I/O callbacks阶段")]),t._v("：执行I/O（例如文件、网络）的回调")]),t._v(" "),a("li",[t._v("idle, prepare 阶段：node内部使用")]),t._v(" "),a("li",[t._v("poll阶段：获取新的I/O事件, 适当的条件下node将阻塞在这里")]),t._v(" "),a("li",[a("strong",[t._v("check阶段")]),t._v("：执行setImmediate回调")]),t._v(" "),a("li",[t._v("close callbacks阶段：执行close事件回调，比如TCP断开连接")])]),t._v(" "),a("p",[t._v("对于日常开发来说，我们比较关注的是"),a("code",[t._v("timers、I/O callbacks、check阶段")])]),t._v(" "),a("ul",[a("li",[t._v("node和浏览器相比一个明显的不同就是node在"),a("strong",[t._v("每个阶段结束后会去执行所有 process.nextTick 、microtask（promise）任务")])])]),t._v(" "),a("p",[t._v("事件循环原理")]),t._v(" "),a("ul",[a("li",[t._v("node 的初始化\n"),a("ul",[a("li",[t._v("初始化 node 环境。")]),t._v(" "),a("li",[t._v("执行输入代码。")]),t._v(" "),a("li",[t._v("执行 process.nextTick 回调。")]),t._v(" "),a("li",[t._v("执行 microtasks。")])])]),t._v(" "),a("li",[t._v("进入 event-loop\n"),a("ul",[a("li",[t._v("进入 timers 阶段\n"),a("ul",[a("li",[t._v("检查 timer 队列是否有到期的 timer 回调，如果有，将到期的 timer 回调按照 timerId 升序执行。")]),t._v(" "),a("li",[t._v("检查是否有 process.nextTick 任务，如果有，全部执行。")]),t._v(" "),a("li",[t._v("检查是否有microtask，如果有，全部执行。")]),t._v(" "),a("li",[t._v("退出该阶段。")])])]),t._v(" "),a("li",[t._v("进入IO callbacks阶段\n"),a("ul",[a("li",[t._v("检查是否有 pending 的 I/O 回调。如果有，执行回调。如果没有，退出该阶段")]),t._v(" "),a("li",[t._v("检查是否有 process.nextTick 任务，如果有，全部执行")]),t._v(" "),a("li",[t._v("检查是否有microtask，如果有，全部执行")]),t._v(" "),a("li",[t._v("退出该阶段")])])]),t._v(" "),a("li",[t._v("进入 idle，prepare 阶段：\n"),a("ul",[a("li",[t._v("这两个阶段与我们编程关系不大，暂且按下不表。")])])]),t._v(" "),a("li",[t._v("进入 poll 阶段")]),t._v(" "),a("li",[t._v("进入 check 阶段")]),t._v(" "),a("li",[t._v("进入 closing 阶段")]),t._v(" "),a("li",[t._v("检查是否有活跃的 handles（定时器、IO等事件句柄）\n"),a("ul",[a("li",[t._v("如果有，继续下一轮循环。")]),t._v(" "),a("li",[t._v("如果没有，结束事件循环，退出程序。")])])])])])]),t._v(" "),a("p",[t._v("可以发现，在事件循环的每一个子阶段"),a("strong",[t._v("退出之前")]),t._v("都会按顺序执行如下过程：")]),t._v(" "),a("ul",[a("li",[t._v("检查是否有 "),a("code",[t._v("process.nextTick")]),t._v(" 回调，如果有，全部执行")]),t._v(" "),a("li",[t._v("检查是否有 "),a("code",[t._v("microtasks")]),t._v("，如果有，全部执行")]),t._v(" "),a("li",[t._v("退出当前阶段")])]),t._v(" "),a("p",[a("strong",[t._v("同一次事件循环中，微任务永远在宏任务之前执行")])]),t._v(" "),a("h3",{attrs:{id:"异步事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步事件"}},[t._v("#")]),t._v(" 异步事件")]),t._v(" "),a("p",[t._v("非I/O：")]),t._v(" "),a("ul",[a("li",[t._v("定时器（setTimeout，setInterval）")]),t._v(" "),a("li",[t._v("process.nextTick")]),t._v(" "),a("li",[t._v("microtask（promise）")]),t._v(" "),a("li",[t._v("setImmediate")]),t._v(" "),a("li",[t._v("DNS.lookup")])]),t._v(" "),a("p",[t._v("I/O：")]),t._v(" "),a("ul",[a("li",[t._v("网络I/O")]),t._v(" "),a("li",[t._v("文件I/O")]),t._v(" "),a("li",[t._v("一些DNS操作")])]),t._v(" "),a("h3",{attrs:{id:"宏任务和微任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏任务和微任务"}},[t._v("#")]),t._v(" 宏任务和微任务")]),t._v(" "),a("p",[t._v("任务队列又分为"),a("code",[t._v("macro-task（宏任务）")]),t._v("与"),a("code",[t._v("micro-task（微任务）")]),t._v("，在最新标准中，它们被分别称为"),a("code",[t._v("task")]),t._v("与"),a("code",[t._v("jobs")])]),t._v(" "),a("p",[t._v("当前执行栈执行完毕时会立刻先处理所有"),a("strong",[t._v("微任务队列")]),t._v("中的事件，然后再去"),a("strong",[t._v("宏任务队列")]),t._v("中取出一个事件。"),a("strong",[t._v("同一次事件循环中，微任务永远在宏任务之前执行")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("_")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("输出： 1，2，3，4")]),t._v(" "),a("ol",[a("li",[t._v("new Promise => 同步执行")]),t._v(" "),a("li",[t._v("Promise.then() => Promise.then()中注册的回调才是异步执行的；具有代表性的微任务")]),t._v(" "),a("li",[t._v("setTimeout就是作为宏任务来存在的")])]),t._v(" "),a("ul",[a("li",[t._v("微任务：process.nextTick、Promise.then catch finally")]),t._v(" "),a("li",[t._v("宏任务： I/O，setTimeout、setInterval、setImmediate,script(整体代码),UI rendering")])]),t._v(" "),a("h2",{attrs:{id:"node的构架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node的构架"}},[t._v("#")]),t._v(" node的构架")]),t._v(" "),a("p",[t._v("主要分为三层: "),a("strong",[t._v("应用app >> V8及node内置架构 >> 操作系统")])]),t._v(" "),a("p",[t._v("V8是node运行的环境，可以理解为node虚拟机．")]),t._v(" "),a("p",[t._v("node内置架构又可分为三层: "),a("strong",[t._v("核心模块(javascript实现) >> c++绑定 >> libuv + CAes + http")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/node-framwork.png",alt:"node的构架"}})]),t._v(" "),a("h2",{attrs:{id:"node核心内置库及实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node核心内置库及实现原理"}},[t._v("#")]),t._v(" node核心内置库及实现原理")]),t._v(" "),a("p",[t._v("常用的核心内置库如"),a("code",[t._v("事件EventEmitter")]),t._v("，"),a("code",[t._v("流Stream")]),t._v("，"),a("code",[t._v("文件fs")]),t._v("，"),a("code",[t._v("网络net,http,https")]),t._v("，"),a("code",[t._v("进程管理process、cluster")]),t._v("等")]),t._v(" "),a("h3",{attrs:{id:"global"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global"}},[t._v("#")]),t._v(" global")]),t._v(" "),a("p",[t._v("全局对象包括：模块变量函数，Buffer类，Timer函数，process, console")]),t._v(" "),a("h4",{attrs:{id:"模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[t._v("#")]),t._v(" 模块")]),t._v(" "),a("ol",[a("li",[t._v("__dirname")]),t._v(" "),a("li",[t._v("__filename")]),t._v(" "),a("li",[t._v("exports")]),t._v(" "),a("li",[t._v("module")]),t._v(" "),a("li",[t._v("require()")])]),t._v(" "),a("h3",{attrs:{id:"定时器timer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器timer"}},[t._v("#")]),t._v(" 定时器Timer")]),t._v(" "),a("p",[t._v("js中有哪些定时器？")]),t._v(" "),a("blockquote",[a("p",[t._v("setTimeout/clearTimeout, setInterval/clearInterval, setImmediate/clearImmediate")])]),t._v(" "),a("p",[t._v("任务执行顺序： 同步 > process.nextTick() > Promise > setTimeout(,less time) > setImmediate >  setTimeout(,more time)")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test.js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 而setTimeout、setInterval、setImmediate的回调函数，追加在次轮循环。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setImmediate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5. 而setTimeout、setInterval、setImmediate的回调函数，追加在次轮循环。")]),t._v("\nprocess"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. process.nextTick和Promise的回调函数，追加在本轮循环，即同步任务一旦执行完成，就开始执行它们。")]),t._v("\nPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. process.nextTick和Promise的回调函数，追加在本轮循环，即同步任务一旦执行完成，就开始执行它们。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 同步任务总是比异步任务更早执行。")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("运行结果如下")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("strong",[t._v("setTimeout和setImmediate，如果setTimeout的时间足够小，则setTimeout先执行，如果为什么？")])]),t._v(" "),a("ol",[a("li",[t._v("查看 Timer源码，setImmediate 和 setTimeout最终都是在一个 时间堆"),a("code",[t._v("PriorityQueue")]),t._v(" 上进行执行")]),t._v(" "),a("li",[t._v("但是，一开始setImmediates先加入队列immediateQueue使用双端链表linkedlist实现")]),t._v(" "),a("li",[t._v("执行的时候，setImmediates从队列进入 时间堆"),a("code",[t._v("PriorityQueue")]),t._v("，这个过程是有代价的，所有如果 setTimeout是0ms或者说时间足够小，setTimeout先执行")])]),t._v(" "),a("h3",{attrs:{id:"进程管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[t._v("#")]),t._v(" 进程管理")]),t._v(" "),a("p",[t._v("child_process, cluster")]),t._v(" "),a("h4",{attrs:{id:"child-process创建子进程的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#child-process创建子进程的方式"}},[t._v("#")]),t._v(" child_process创建子进程的方式")]),t._v(" "),a("ul",[a("li",[t._v(".exec()、.execFile()、.fork()底层都是通过"),a("code",[t._v(".spawn()")]),t._v("实现的。")]),t._v(" "),a("li",[t._v(".exec()、execFile()额外提供了回调，当子进程停止的时候执行")])]),t._v(" "),a("p",[a("strong",[t._v("风险项")])]),t._v(" "),a("p",[t._v("传入的命令，如果是用户输入的，有可能产生"),a("strong",[t._v("类似sql注入的风险")]),t._v("，比如")]),t._v(" "),a("p",[a("code",[t._v("exec('ls hello.txt', function(error, stdout, stderr){})")]),t._v("\n恶意攻击 =>\n"),a("code",[t._v("exec('ls hello.txt; rm -rf *', function(error, stdout, stderr){})")])]),t._v(" "),a("h4",{attrs:{id:"cluster"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cluster"}},[t._v("#")]),t._v(" cluster")]),t._v(" "),a("p",[t._v("master 进程通过 "),a("code",[t._v("process.fork()")]),t._v(" 创建子进程，他们之间通过 "),a("code",[t._v("IPC (内部进程通信)")]),t._v("通道实现通信。")]),t._v(" "),a("p",[t._v("操作系统的进程间通信方式: 共享内存，消息传递（socket,rpc），信号量，管道,消息队列等")]),t._v(" "),a("ol",[a("li",[t._v("共享内存；不同进程共享同一段内存空间。通常还需要引入信号量机制，来实现同步与互斥。")]),t._v(" "),a("li",[t._v("消息传递；这种模式下，进程间通过发送、接收消息来实现信息的同步。nodejs父子进程通过事件机制通信，就是这种模型")]),t._v(" "),a("li",[t._v("信号量；信号量简单说就是系统赋予进程的一个状态值，未得到控制权的进程会在特定地方被强迫停下来，等待可以继续进行的信号到来。如果信号量只有 0 或者 1 两个值的话，又被称作“互斥锁”。这个机制也被广泛用于各种编程模式中。")]),t._v(" "),a("li",[t._v("管道；用于连接两个进程，将一个进程的输出作为另一个进程的输入")])]),t._v(" "),a("p",[t._v("Node.js 为父子进程的通信提供了"),a("strong",[t._v("事件机制EventEmmiter")]),t._v("来传递消息。")]),t._v(" "),a("h5",{attrs:{id:"负载均衡策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡策略"}},[t._v("#")]),t._v(" 负载均衡策略")]),t._v(" "),a("p",[t._v("Node.js 默认采用的策略是 round-robin 时间片轮转法。")]),t._v(" "),a("p",[t._v("负载均衡算法:")]),t._v(" "),a("ul",[a("li",[t._v("round-robin "),a("strong",[t._v("时间片轮转法")]),t._v("; 每一次把来自用户的请求轮流分配给各个进程，不足：处理效率不一样，会出现负载不均衡")]),t._v(" "),a("li",[t._v("WRR (weight-round-robin) "),a("strong",[t._v("加权轮转法")]),t._v("；")])]),t._v(" "),a("p",[t._v("时间片轮转法（round-robin）"),a("strong",[t._v("不适用于windows")]),t._v(", 第二种方式是由主进程创建 socket 监听端口后, 将 "),a("strong",[t._v("socket 句柄直接分发")]),t._v("给相应的 worker, 然后当连接进来时, 就直接由相应的 worker 来接收连接并处理；存在负载不均衡的问题, 比如通常 70% 的连接仅被 8 个进程中的 2 个处理, 而其他进程比较清闲.")]),t._v(" "),a("h5",{attrs:{id:"多进程的端口监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程的端口监听"}},[t._v("#")]),t._v(" 多进程的端口监听")]),t._v(" "),a("ol",[a("li",[t._v("master 进程负责监听端口")]),t._v(" "),a("li",[t._v("然后将连接通过某种分发策略（比如 round-robin），转发给 worker 进程。")]),t._v(" "),a("li",[t._v("这样由于只有 master 进程接收客户端连接，就解决了竞争导致的负载不均衡的问题")]),t._v(" "),a("li",[t._v("关键：要求 master 进程的稳定性足够好")])]),t._v(" "),a("h3",{attrs:{id:"eventemitter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter"}},[t._v("#")]),t._v(" EventEmitter")]),t._v(" "),a("p",[t._v("EventEmitter是node中一个实现"),a("strong",[t._v("观察者模式")]),t._v("的类，主要功能是"),a("strong",[t._v("监听和发射消息，用于处理多模块交互问题")])]),t._v(" "),a("h4",{attrs:{id:"代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" util "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'util'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" EventEmitter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'events'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EventEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MyEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EventEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数")]),t._v("\n\nutil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inherits")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EventEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" em "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'收到事件hello的数据:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收事件，并打印到控制台")]),t._v("\nem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EventEmitter传递消息真方便!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h4",{attrs:{id:"eventemitter有哪些典型应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter有哪些典型应用"}},[t._v("#")]),t._v(" EventEmitter有哪些典型应用")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("模块间传递消息")])]),t._v(" "),a("li",[a("strong",[t._v("回调函数内外传递消息")])]),t._v(" "),a("li",[t._v("处理"),a("strong",[t._v("流数据")]),t._v("，因为流是在EventEmitter基础上实现的.")]),t._v(" "),a("li",[a("strong",[t._v("观察者模式发射触发机制")]),t._v("相关应用")])]),t._v(" "),a("h4",{attrs:{id:"怎么捕获eventemitter的错误事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么捕获eventemitter的错误事件"}},[t._v("#")]),t._v(" 怎么捕获EventEmitter的错误事件")]),t._v(" "),a("p",[a("strong",[t._v("监听error事件")]),t._v("即可．如果有多个EventEmitter,也可以用"),a("strong",[t._v("domain来统一处理错误事件")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" domain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'domain'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myDomain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" domain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyDomain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'domain接收到的错误事件:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收事件并打印")]),t._v("\nmyDomain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" emitter1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    emitter1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'错误事件来自emitter1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    emitter2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    emitter2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'error'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'错误事件来自emitter2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("h4",{attrs:{id:"eventemitter中的newlistenser事件有什么用处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventemitter中的newlistenser事件有什么用处"}},[t._v("#")]),t._v(" EventEmitter中的newListenser事件有什么用处")]),t._v(" "),a("p",[a("code",[t._v("newListener")]),t._v("可以用来做事件机制的反射，特殊应用，事件管理等")]),t._v(" "),a("p",[a("strong",[t._v("当任何on事件添加到EventEmitter时，就会触发newListener事件")]),t._v("，基于这种模式，我们可以做很多自定义处理.")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" emitter3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nemitter3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'newListener'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"新事件的名字:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"新事件的代码:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是自定义延时处理机制"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nemitter3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello　node'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h3",{attrs:{id:"stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream"}},[t._v("#")]),t._v(" Stream")]),t._v(" "),a("p",[t._v("stream是基于事件"),a("code",[t._v("EventEmitter")]),t._v("的数据管理模式．由各种不同的抽象接口组成，主要包括"),a("code",[t._v("可写，可读，可读写，可转换等")]),t._v("几种类型")]),t._v(" "),a("h4",{attrs:{id:"stream有什么好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream有什么好处"}},[t._v("#")]),t._v(" Stream有什么好处")]),t._v(" "),a("p",[a("code",[t._v("非阻塞式数据处理")]),t._v("提升效率，片断处理节省内存，"),a("code",[t._v("管道处理")]),t._v("方便可扩展等")]),t._v(" "),a("h4",{attrs:{id:"stream有哪些典型应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream有哪些典型应用"}},[t._v("#")]),t._v(" Stream有哪些典型应用")]),t._v(" "),a("p",[t._v("文件，网络，数据转换，音频视频等")]),t._v(" "),a("h4",{attrs:{id:"怎么捕获stream的错误事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么捕获stream的错误事件"}},[t._v("#")]),t._v(" 怎么捕获Stream的错误事件")]),t._v(" "),a("p",[t._v("监听"),a("code",[t._v("error")]),t._v("事件，方法同EventEmitter")]),t._v(" "),a("h4",{attrs:{id:"有哪些常用stream-分别什么时候使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常用stream-分别什么时候使用"}},[t._v("#")]),t._v(" 有哪些常用Stream,分别什么时候使用")]),t._v(" "),a("ul",[a("li",[t._v("可读流"),a("code",[t._v("Readable")]),t._v("，在作为输入数据源时使用；")]),t._v(" "),a("li",[t._v("可写流"),a("code",[t._v("Writable")]),t._v(",在作为输出源时使用；")]),t._v(" "),a("li",[t._v("双工流"),a("code",[t._v("Duplex")]),t._v(",它作为输出源接受被写入，同时又作为输入源被后面的流读出．")]),t._v(" "),a("li",[t._v("转换流"),a("code",[t._v("Transform")]),t._v("，跟"),a("code",[t._v("Duplex")]),t._v("一样，都是双向流，但它的输出与输入是相关联的\n"),a("ul",[a("li",[t._v("需要实现一个函数"),a("code",[t._v("_transfrom(chunk, encoding, callback)")]),t._v(";而Duplex需要分别实现"),a("code",[t._v("_read(size)")]),t._v("函数和"),a("code",[t._v("_write(chunk, encoding, callback)")]),t._v("函数")])])])]),t._v(" "),a("h4",{attrs:{id:"缓冲"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓冲"}},[t._v("#")]),t._v(" 缓冲")]),t._v(" "),a("p",[t._v("highWaterMark")]),t._v(" "),a("p",[t._v("可缓冲的数据大小取决于传入流构造函数的 highWaterMark 选项。 对于普通的流， highWaterMark 指定了字节的总数。 对于对象模式的流， highWaterMark 指定了对象的总数。")]),t._v(" "),a("p",[t._v("限制数据的缓冲到可接受的程度，也就是"),a("strong",[t._v("读写速度不一致的源头与目的地不会压垮内存")])]),t._v(" "),a("h4",{attrs:{id:"实现一个writable-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现一个writable-stream"}},[t._v("#")]),t._v(" 实现一个Writable Stream")]),t._v(" "),a("p",[t._v("三步走:")]),t._v(" "),a("ol",[a("li",[t._v("继承"),a("code",[t._v("Writable")])]),t._v(" "),a("li",[t._v("覆写原型链方法"),a("code",[t._v("_write(chunk, encoding, callback)")]),t._v("函数")])]),t._v(" "),a("p",[t._v("代码实现：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Writable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stream'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" util "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'util'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MyWritable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Writable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \nutil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inherits")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyWritable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Writable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承Writable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyWritable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("_write")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" encoding"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"被写入的数据是:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处可对写入的数据进行处理")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nprocess"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stdin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyWritable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// stdin作为输入源，MyWritable作为输出源   ")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"文件系统fs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件系统fs"}},[t._v("#")]),t._v(" 文件系统fs")]),t._v(" "),a("p",[t._v("Node通过fs模块来和"),a("strong",[t._v("文件系统")]),t._v("进行交互，该模块提供了一些"),a("strong",[t._v("标准的文件访问API类")]),t._v("打开、读取、写入文件、以及与其交互。")]),t._v(" "),a("h4",{attrs:{id:"内置的fs模块架构是什么样子的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置的fs模块架构是什么样子的"}},[t._v("#")]),t._v(" 内置的fs模块架构是什么样子的")]),t._v(" "),a("p",[t._v("fs模块主要由下面几部分组成:")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("POSIX文件操作的封装")]),t._v(",对应于"),a("strong",[t._v("操作系统的原生文件操作")]),t._v("; unlink,stat,rename...")]),t._v(" "),a("li",[t._v("文件流 fs.createReadStream和fs.createWriteStream")]),t._v(" "),a("li",[t._v("同步文件读写, fs.readFileSync和fs.writeFileSync")]),t._v(" "),a("li",[t._v("异步文件读写, fs.readFile和fs.writeFile")])]),t._v(" "),a("h4",{attrs:{id:"读写一个文件有多少种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写一个文件有多少种方法"}},[t._v("#")]),t._v(" 读写一个文件有多少种方法")]),t._v(" "),a("p",[t._v("总体来说有四种:")]),t._v(" "),a("ol",[a("li",[t._v("POSIX式底层读写")]),t._v(" "),a("li",[t._v("流式读写")]),t._v(" "),a("li",[t._v("同步读写")]),t._v(" "),a("li",[t._v("异步读写")])]),t._v(" "),a("h4",{attrs:{id:"怎么读取json配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么读取json配置文件"}},[t._v("#")]),t._v(" 怎么读取json配置文件")]),t._v(" "),a("ol",[a("li",[t._v("利用node内置的"),a("code",[t._v("require('data.json')")]),t._v("机制 ("),a("strong",[t._v("注意")]),t._v("：其中一个改变了js对象，其它跟着改变)")]),t._v(" "),a("li",[t._v("读入文件入内容，然后用"),a("code",[t._v("JSON.parse(content)")]),t._v("转换成js对象")])]),t._v(" "),a("p",[t._v("两种方式的区别：")]),t._v(" "),a("ol",[a("li",[t._v("require机制情况下，如果多个模块都加载了同一个json文件，那么其中一个改变了js对象，其它跟着改变，这是由node模块的"),a("strong",[t._v("缓存机制")]),t._v("造成的，只有一个js模块对象")]),t._v(" "),a("li",[t._v("第二种方式则可以随意改变加载后的js变量，而且各模块互不影响，因为他们都是独立的，是多个js对象")])]),t._v(" "),a("h4",{attrs:{id:"fs-watch和fs-watchfile有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fs-watch和fs-watchfile有什么区别"}},[t._v("#")]),t._v(" fs.watch和fs.watchFile有什么区别")]),t._v(" "),a("p",[t._v("二者主要用来监听文件变动")]),t._v(" "),a("ol",[a("li",[t._v("fs.watch利用操作系统原生机制来监听，可能不适用网络文件系统;")]),t._v(" "),a("li",[t._v("fs.watchFile则是定期检查文件状态变更，适用于网络文件系统，但是相比fs.watch有些慢，因为不是实时机制．")])]),t._v(" "),a("h3",{attrs:{id:"网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[t._v("#")]),t._v(" 网络")]),t._v(" "),a("h4",{attrs:{id:"node的网络模块架构是什么样子的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node的网络模块架构是什么样子的"}},[t._v("#")]),t._v(" node的网络模块架构是什么样子的")]),t._v(" "),a("p",[t._v("node全面支持各种网络服务器和客户端，包括"),a("code",[t._v("http/https, tcp, udp, dns, tls/ssl")]),t._v("等")]),t._v(" "),a("h4",{attrs:{id:"node是怎样支持https-tls的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node是怎样支持https-tls的"}},[t._v("#")]),t._v(" node是怎样支持https,tls的")]),t._v(" "),a("p",[t._v("要实现以下几个步骤即可:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("openssl")]),t._v("生成公钥私钥")]),t._v(" "),a("li",[t._v("服务器或客户端使用"),a("code",[t._v("https")]),t._v("替代http")]),t._v(" "),a("li",[t._v("服务器或客户端加载公钥私钥证书")])]),t._v(" "),a("h2",{attrs:{id:"优雅退出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优雅退出"}},[t._v("#")]),t._v(" 优雅退出")]),t._v(" "),a("p",[a("code",[t._v("graceful")]),t._v("模块配合"),a("code",[t._v("cluster")]),t._v("就可以实现这个解决方案。")]),t._v(" "),a("p",[t._v("graceful是基于domain模块实现的")]),t._v(" "),a("p",[t._v("domain；能捕捉异步回调中出现的异常。（弥补try...catch...的不足）")]),t._v(" "),a("p",[t._v("process.on('uncaughtException)")]),t._v(" "),a("h2",{attrs:{id:"错误优先的回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误优先的回调函数"}},[t._v("#")]),t._v(" 错误优先的回调函数")]),t._v(" "),a("p",[t._v("错误优先的回调函数用于传递错误和数据。第一个参数始终应该是一个错误对象， 用于检查程序是否发生了错误。其余的参数用于传递数据。")]),t._v(" "),a("p",[t._v("只有遵循错误优先回调的函数可以promisify")]),t._v(" "),a("h2",{attrs:{id:"如何避免回调地狱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何避免回调地狱"}},[t._v("#")]),t._v(" 如何避免回调地狱")]),t._v(" "),a("ul",[a("li",[t._v("使用三方库，Q, blubird, async进行promisify")]),t._v(" "),a("li",[t._v("使用Promise链式调用")]),t._v(" "),a("li",[t._v("使用yield+生成器generator或Promise, co")]),t._v(" "),a("li",[t._v("使用async, await语法糖ES6")])]),t._v(" "),a("h2",{attrs:{id:"什么是stub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是stub"}},[t._v("#")]),t._v(" 什么是stub")]),t._v(" "),a("p",[a("code",[t._v("TDD、Stub和Mock")])]),t._v(" "),a("p",[a("code",[t._v("stub")]),t._v("存在的意图是为了让测试对象可以正常的执行，硬编码一些输入和输出")]),t._v(" "),a("p",[a("code",[t._v("mock")]),t._v("除了保证stub的功能之外，还可深入的模拟对象之间的交互方式，如：调用了几次、在某种情况下是否会抛出异常")]),t._v(" "),a("p",[t._v("stub是 mock 的子集")]),t._v(" "),a("h2",{attrs:{id:"express的路由机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#express的路由机制"}},[t._v("#")]),t._v(" express的路由机制")]),t._v(" "),a("p",[t._v("express是如何从一个中间件执行到下一个中间件的?")]),t._v(" "),a("p",[t._v("A: "),a("code",[t._v("app.use()")])]),t._v(" "),a("p",[t._v("app.use()的原理是什么？")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("middleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 做该干的事")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 做完后调用下一个函数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// next也是一个函数，它表示函数数组中的下一个函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("其实所有中间件函数，是顺序添加到"),a("strong",[t._v("中间件数组")]),t._v("里面，这个函数数组表示在发出响应之前要执行的所有函数")]),t._v(" "),a("p",[t._v("使用app.use(fn)后，传进来的fn就会被扔到这个数组里，执行完毕后调用next()方法执行函数数组里的下一个函数，如果没有调用next()的话，就不会调用下一个函数了，也就是说调用就会被终止")]),t._v(" "),a("h2",{attrs:{id:"express和koa的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#express和koa的区别"}},[t._v("#")]),t._v(" Express和Koa的区别")]),t._v(" "),a("ol",[a("li",[t._v("Handler 处理方式\n"),a("ul",[a("li",[t._v("Express 使用普通的回调函数，一种线性的逻辑，在同一个线程上完成所有的 HTTP 请求;异步操作的执行顺序不确定；回调的方式不利于错误捕获；")]),t._v(" "),a("li",[t._v("使用ES7的"),a("strong",[t._v("Async/Await")]),t._v("替换了原来的 Generator + co 的模式; Async/Await 现在也称为 JS 异步的终极解决方案。")])])]),t._v(" "),a("li",[t._v("中间件实现机制\n"),a("ul",[a("li",[t._v("koa2: 中间件 Compose;洋葱圈模型;会去等待异步（Promise）完成;可以非常方便的"),a("strong",[t._v("实现后置处理逻辑")])]),t._v(" "),a("li",[t._v("Express 中间件实现是基于 Callback 回调函数同步的，它"),a("strong",[t._v("不会去等待异步（Promise）完成")])])])]),t._v(" "),a("li",[t._v("响应机制\n"),a("ul",[a("li",[t._v("在 Koa 中数据的响应是通过 ctx.body 进行设置，注意这里仅是设置并没有立即响应，而是在所有的中间件结束之后做了响应;这样做一个好处是我们在响应之前是有一些预留操作空间的，")]),t._v(" "),a("li",[t._v("express:res.send() 之后就立即响应了，这样如果还想在上层中间件做一些操作是有点难的。")])])])]),t._v(" "),a("p",[t._v("其实，Express 也是类似的洋葱模型，不同的是：")]),t._v(" "),a("p",[t._v("Express 中间件机制使用了 Callback 实现，这样如果出现异步则可能会使你在执行顺序上感到困惑，因此如果我们想做接口耗时统计、错误处理 Koa 的这种中间件模式处理起来更方便些。最后一点响应机制也很重要，Koa 不是立即响应，是整个中间件处理完成在最外层进行了响应，而 Express 则是立即响应。")]),t._v(" "),a("h2",{attrs:{id:"egg-js和nest-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#egg-js和nest-js"}},[t._v("#")]),t._v(" egg.js和nest.js")]),t._v(" "),a("ul",[a("li",[t._v("egg.js是在koa的基础上做了一层很好的面向大型企业级应用的框架封装")]),t._v(" "),a("li",[t._v("egg支持ts")]),t._v(" "),a("li",[t._v("egg.js更多的是按照"),a("strong",[t._v("洋葱模型")]),t._v("的开发方式，和AOP编程还是有点区别的")]),t._v(" "),a("li",[t._v("NEST.js配合typeorm可以在node下拥有不输Spring的"),a("strong",[t._v("面向切面编程")]),t._v("的体验")])])])}),[],!1,null,null,null);s.default=e.exports}}]);