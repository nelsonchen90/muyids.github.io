(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{554:function(s,a,t){"use strict";t.r(a);var e=t(42),v=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("Publish & Subscribe 即消息的发布与订阅，是一种设计模式：观察者模式。")]),s._v(" "),t("p",[s._v("发布订阅模式下，发布方不主动发布消息给接收方，而是由订阅方选择性接收，这使得发布方和订阅方相对独立，减少了耦合性。")]),s._v(" "),t("h2",{attrs:{id:"使用场合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场合"}},[s._v("#")]),s._v(" 使用场合")]),s._v(" "),t("p",[s._v("当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候，就应该考虑使用观察者模式。")]),s._v(" "),t("p",[s._v("很多分布式的场景中都有所应用，一般分为三类：")]),s._v(" "),t("ul",[t("li",[s._v("在线应用 - 实现系统核心逻辑，时延10ms以内\n"),t("ul",[t("li",[s._v("事务日志")]),s._v(" "),t("li",[s._v("分布式的消息队列")]),s._v(" "),t("li",[s._v("rpc system")])])]),s._v(" "),t("li",[s._v("流式计算 - 对产生数据实时处理，对时延要求低，单对吞吐量要求大，时延100ms")]),s._v(" "),t("li",[s._v("日志收集 - 秒~分钟")])]),s._v(" "),t("h2",{attrs:{id:"redis的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis的实现"}},[s._v("#")]),s._v(" redis的实现")]),s._v(" "),t("h3",{attrs:{id:"频道订阅"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#频道订阅"}},[s._v("#")]),s._v(" 频道订阅")]),s._v(" "),t("p",[s._v("订阅 -- 开启一个客户端，进行topic订阅")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("> SUBSCRIBE first second\n")])])]),t("p",[s._v("发布 -- 开启另一个客户端，进行消息发布")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("> PUBLISH second Hello\n")])])]),t("h3",{attrs:{id:"模式匹配订阅"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式匹配订阅"}},[s._v("#")]),s._v(" 模式匹配订阅")]),s._v(" "),t("p",[s._v("Redis 的Pub/Sub实现支持模式匹配。")]),s._v(" "),t("ul",[t("li",[s._v("订阅")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ PSUBSCRIBE news.*\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("将接收所有发到news.art.figurative, news.music.jazz等等的消息。")]),s._v(" "),t("ul",[t("li",[s._v("取消订阅")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ PUNSUBSCRIBE news.*\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("模式匹配将会带来cpu的性能问题，不建议生产环境使用")])]),s._v(" "),t("h2",{attrs:{id:"优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[s._v("#")]),s._v(" 优缺点")]),s._v(" "),t("h3",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),t("ul",[t("li",[s._v("支持简单的广播通信，自动通知所有已经订阅过的对象；")]),s._v(" "),t("li",[s._v("页面载入后发布者很容易与订阅者存在一种动态关联，增加了灵活性；")]),s._v(" "),t("li",[s._v("发布者与订阅者之间的抽象耦合关系能够单独扩展以及重用。")])]),s._v(" "),t("h3",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),t("ul",[t("li",[s._v("创建订阅者本身要消耗一定的时间和内存，而且当你订阅一个消息后，也许此消息最后都未发生，但这个订阅者会始终存在于内存中；")]),s._v(" "),t("li",[s._v("虽然可以弱化对象之间的联系，但如果过度使用的话，对象和对象之间的必要联系也将被深埋在背后，会导致程序难以跟踪维护和理解。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);