(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{552:function(v,_,a){"use strict";a.r(_);var t=a(42),s=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("hr"),v._v(" "),a("p",[v._v("title: 常见性能优化策略\ndate: 2017-11-04T00:00:00+08:00\ncategories: [系统设计]\ntags: [系统设计]")]),v._v(" "),a("hr"),v._v(" "),a("p",[v._v("在设计系统时，怎样避免性能问题的发生")]),v._v(" "),a("h2",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[v._v("#")]),v._v(" 代码")]),v._v(" "),a("p",[v._v("往往大部分问题都是由于代码的不合理造成的")]),v._v(" "),a("p",[v._v("遇到问题，请先排查代码")]),v._v(" "),a("h2",{attrs:{id:"数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库"}},[v._v("#")]),v._v(" 数据库")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("SQL调优")]),v._v(" "),a("p",[v._v("这是最常用、每一个技术人员都应该掌握基本的SQL调优手段（包括方法、工具、辅助系统等）。这里以MySQL为例，最常见的方式是，由自带的慢查询日志或者开源的慢查询系统定位到具体的出问题的SQL，然后使用explain、profile等工具来逐步调优，最后经过测试达到效果后上线。这方面的细节，可以参考MySQL索引原理及慢查询优化。")])]),v._v(" "),a("li",[a("p",[v._v("架构层面的调优")]),v._v(" "),a("p",[v._v("这一类调优包括读写分离、多从库负载均衡、水平和垂直分库分表等方面，一般需要的改动较大，但是频率没有SQL调优高，而且一般需要DBA来配合参与。那么什么时候需要做这些事情？我们可以通过内部监控报警系统（比如Zabbix），定期跟踪一些指标数据是否达到瓶颈，一旦达到瓶颈或者警戒值，就需要考虑这些事情。通常，DBA也会定期监控这些指标值。")])]),v._v(" "),a("li",[a("p",[v._v("连接池调优")]),v._v(" "),a("p",[v._v("我们的应用为了实现数据库连接的高效获取、对数据库连接的限流等目的，通常会采用连接池类的方案，即每一个应用节点都管理了一个到各个数据库的连接池。随着业务访问量或者数据量的增长，原有的连接池参数可能不能很好地满足需求，这个时候就需要结合当前使用连接池的原理、具体的连接池监控数据和当前的业务量作一个综合的判断，通过反复的几次调试得到最终的调优参数。")])])]),v._v(" "),a("h2",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[v._v("#")]),v._v(" 缓存")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("分类")]),v._v(" "),a("p",[v._v("本地缓存（HashMap/ConcurrentHashMap、Ehcache、Guava Cache等），缓存服务（Redis/Tair/Memcache等）。")])]),v._v(" "),a("li",[a("p",[v._v("使用场景")]),v._v(" "),a("p",[v._v("什么情况适合用缓存？考虑以下两种场景：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("短时间内相同数据重复查询多次且数据更新不频繁，这个时候可以选择先从缓存查询，查询不到再从数据库加载并回设到缓存的方式。此种场景较适合用单机缓存。")])]),v._v(" "),a("li",[a("p",[v._v("高并发查询热点数据，后端数据库不堪重负，可以用缓存来扛。")])])])]),v._v(" "),a("li",[a("p",[v._v("选型考虑")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("如果数据量小，并且不会频繁地增长又清空（这会导致频繁地垃圾回收），那么可以选择本地缓存。具体的话，如果需要一些策略的支持（比如缓存满的逐出策略），可以考虑Ehcache；如不需要，可以考虑HashMap；如需要考虑多线程并发的场景，可以考虑ConcurentHashMap。")])]),v._v(" "),a("li",[a("p",[v._v("其他情况，可以考虑缓存服务。目前从资源的投入度、可运维性、是否能动态扩容以及配套设施来考虑，我们优先考虑Tair。除非目前Tair还不能支持的场合（比如分布式锁、Hash类型的value），我们考虑用Redis。")])])])]),v._v(" "),a("li",[a("p",[v._v("设计关键点")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("什么时候更新缓存？如何保障更新的可靠性和实时性？")])]),v._v(" "),a("li",[a("p",[v._v("缓存是否会满，缓存满了怎么办？")])]),v._v(" "),a("li",[a("p",[v._v("缓存是否允许丢失？丢失了怎么办？")])]),v._v(" "),a("li",[a("p",[v._v("缓存被“击穿”问题\n对于一些设置了过期时间的key，如果这些key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑另外一个问题：缓存被“击穿”的问题。")]),v._v(" "),a("ul",[a("li",[v._v("概念：缓存在某个时间点过期的时候，恰好在这个时间点对这个Key有大量的并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。")])]),v._v(" "),a("p",[v._v("如何解决：业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。")])])])])]),v._v(" "),a("h2",{attrs:{id:"异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[v._v("#")]),v._v(" 异步")]),v._v(" "),a("ul",[a("li",[v._v("使用场景")])]),v._v(" "),a("p",[v._v("针对某些客户端的请求，在服务端可能需要针对这些请求做一些附属的事情，这些事情其实用户并不关心或者用户不需要立即拿到这些事情的处理结果，这种情况就比较适合用异步的方式处理这些事情。")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("作用")]),v._v(" "),a("p",[v._v("缩短接口响应时间，使用户的请求快速返回，用户体验更好。")]),v._v(" "),a("p",[v._v("避免线程长时间处于运行状态，这样会引起服务线程池的可用线程长时间不够用，进而引起线程池任务队列长度增大，从而阻塞更多请求任务，使得更多请求得不到技术处理。")]),v._v(" "),a("p",[v._v("线程长时间处于运行状态，可能还会引起系统Load、CPU使用率、机器整体性能下降等一系列问题，甚至引发雪崩。异步的思路可以在不增加机器数和CPU数的情况下，有效解决这个问题。")])]),v._v(" "),a("li",[a("p",[v._v("常见做法")]),v._v(" "),a("p",[v._v("一种做法，是额外开辟线程，这里可以采用额外开辟一个线程或者使用线程池的做法，在IO线程（处理请求响应）之外的线程来处理相应的任务，在IO线程中让response先返回。")]),v._v(" "),a("p",[v._v("如果异步线程处理的任务设计的数据量非常巨大，那么可以引入阻塞队列BlockingQueue作进一步的优化。具体做法是让一批异步线程不断地往阻塞队列里扔数据，然后额外起一个处理线程，循环批量从队列里拿预设大小的一批数据，来进行批处理（比如发一个批量的远程服务请求），这样进一步提高了性能。")]),v._v(" "),a("p",[v._v("另一种做法，是使用消息队列（MQ）中间件服务，MQ天生就是异步的。一些额外的任务，可能不需要我这个系统来处理，但是需要其他系统来处理。这个时候可以先把它封装成一个消息，扔到消息队列里面，通过消息中间件的可靠性保证把消息投递到关心它的系统，然后让这个系统来做相应的处理。")])])]),v._v(" "),a("h2",{attrs:{id:"nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nosql"}},[v._v("#")]),v._v(" NoSQL")]),v._v(" "),a("h3",{attrs:{id:"和缓存的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和缓存的区别"}},[v._v("#")]),v._v(" 和缓存的区别")]),v._v(" "),a("p",[v._v("先说明一下，这里介绍的和缓存那一节不一样，虽然可能会使用一样的数据存储方案（比如Redis或者Tair），但是使用的方式不一样，这一节介绍的是把它作为DB来用。如果当作DB来用，需要有效保证数据存储方案的可用性、可靠性。")]),v._v(" "),a("h3",{attrs:{id:"使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[v._v("#")]),v._v(" 使用场景")]),v._v(" "),a("p",[v._v("需要结合具体的业务场景，看这块业务涉及的数据是否适合用NoSQL来存储，对数据的操作方式是否适合用NoSQL的方式来操作，或者是否需要用到NoSQL的一些额外特性（比如原子加减等）。")]),v._v(" "),a("p",[v._v("如果业务数据不需要和其他数据作关联，不需要事务或者外键之类的支持，而且有可能写入会异常频繁，这个时候就比较适合用NoSQL（比如HBase）。")]),v._v(" "),a("h2",{attrs:{id:"度量系统（监控、报警、服务依赖管理）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#度量系统（监控、报警、服务依赖管理）"}},[v._v("#")]),v._v(" 度量系统（监控、报警、服务依赖管理）")]),v._v(" "),a("p",[v._v("严格来说，度量系统不属于性能优化的范畴，但是这方面和性能优化息息相关，可以说为性能优化提供一个强有力的数据参考和支撑。没有度量系统，基本上就没有办法定位到系统的问题，也没有办法有效衡量优化后的效果。很多人不重视这方面，但我认为它是系统稳定性和性能保障的基石。")]),v._v(" "),a("h3",{attrs:{id:"关键流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键流程"}},[v._v("#")]),v._v(" 关键流程")]),v._v(" "),a("p",[v._v("如果要设计这套系统，总体来说有哪些关键流程需要设计呢？")]),v._v(" "),a("ul",[a("li",[v._v("确定指标")]),v._v(" "),a("li",[v._v("采集数据")]),v._v(" "),a("li",[v._v("计算数据，存储结果")]),v._v(" "),a("li",[v._v("展现和分析")])]),v._v(" "),a("h3",{attrs:{id:"需要监控和报警哪些指标数据？需要关注哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要监控和报警哪些指标数据？需要关注哪些"}},[v._v("#")]),v._v(" 需要监控和报警哪些指标数据？需要关注哪些")]),v._v(" "),a("p",[v._v("按照需求出发，主要需要二方面的指标：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("接口性能相关，包括单个接口和全部的QPS、响应时间、调用量（统计时间维度越细越好；最好是，既能以节点为维度，也可以以服务集群为维度，来查看相关数据）。其中还涉及到服务依赖关系的管理，这个时候需要用到服务依赖管理系统")])]),v._v(" "),a("li",[a("p",[v._v("单个机器节点相关，包括CPU使用率、Load值、内存占用率、网卡流量等。如果节点是一些特殊类型的服务（比如MySQL、Redis、Tair），还可以监控这些服务特有的一些关键指标。")])])]),v._v(" "),a("h3",{attrs:{id:"数据采集方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据采集方式"}},[v._v("#")]),v._v(" 数据采集方式")]),v._v(" "),a("p",[v._v("通常采用异步上报的方式，具体做法有两种：第一种，发到本地的Flume端口，由Flume进程收集到远程的Hadoop集群或者Storm集群来进行运算；第二种，直接在本地运算好以后，使用异步和本地队列的方式，发送到监控服务器。")]),v._v(" "),a("h3",{attrs:{id:"数据计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据计算"}},[v._v("#")]),v._v(" 数据计算")]),v._v(" "),a("p",[v._v("可以采用离线运算（MapReduce/Hive）或者实时/准实时运算（Storm/Spark）的方式，运算后的结果存入MySQL或者HBase；某些情况，也可以不计算，直接采集发往监控服务器。")]),v._v(" "),a("h3",{attrs:{id:"展现和分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#展现和分析"}},[v._v("#")]),v._v(" 展现和分析")]),v._v(" "),a("p",[v._v("提供统一的展现分析平台，需要带报表（列表/图表）监控和报警的功能。")])])}),[],!1,null,null,null);_.default=s.exports}}]);