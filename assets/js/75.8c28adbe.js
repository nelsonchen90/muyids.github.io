(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{547:function(e,t,v){"use strict";v.r(t);var a=v(42),_=Object(a.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"int和integer互转"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#int和integer互转"}},[e._v("#")]),e._v(" int和Integer互转")]),e._v(" "),v("ul",[v("li",[e._v("Integer.valueOf(a) : int转Integer")]),e._v(" "),v("li",[e._v("V.intvalue() : Integer转int")])]),e._v(" "),v("h2",{attrs:{id:"string"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[e._v("#")]),e._v(" string")]),e._v(" "),v("ul",[v("li",[e._v("Integer.parseInt(s) : string转int")])]),e._v(" "),v("h2",{attrs:{id:"array"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[e._v("#")]),e._v(" Array")]),e._v(" "),v("p",[v("code",[e._v("int data[]")]),e._v(" 和 "),v("code",[e._v("int []data")]),e._v(" 两种写法均可")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("int data[] = new int[3]")]),e._v(" : 声明数组")]),e._v(" "),v("li",[v("code",[e._v("int[] nums = {1,2,3}")]),e._v(" : 静态初始化")]),e._v(" "),v("li",[e._v("二维数组声明"),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("int data[][] = new int[][]{{1, 2, 3}, {4, 5}, {6, 7, 8, 9}}\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br")])])]),e._v(" "),v("li",[e._v("Arrays.copyOf(数组名，扩容后长度) : 数组扩容")]),e._v(" "),v("li",[e._v("Arrays.copy()：数组的复制")]),e._v(" "),v("li",[e._v("Arrays.sort()：数组排序")]),e._v(" "),v("li",[e._v("Arrays.fill(数组名, 开始位置 , 结束位置, 填入的值)：向数组中填充元素")])]),e._v(" "),v("h2",{attrs:{id:"collection"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[e._v("#")]),e._v(" Collection")]),e._v(" "),v("ul",[v("li",[e._v("List\n"),v("ul",[v("li",[e._v("LinkedList")]),e._v(" "),v("li",[e._v("ArrayList")]),e._v(" "),v("li",[e._v("Vector\n"),v("ul",[v("li",[e._v("Stack")])])])])]),e._v(" "),v("li",[e._v("Set")])]),e._v(" "),v("p",[e._v("主要方法:")]),e._v(" "),v("ul",[v("li",[e._v("add(Object o) : 添加对象到集合")]),e._v(" "),v("li",[e._v("remove(Object o) : 删除指定的对象")]),e._v(" "),v("li",[e._v("size() : 返回当前集合中元素的数量")]),e._v(" "),v("li",[e._v("contains(Object o) : 查找集合中是否有指定的对象")]),e._v(" "),v("li",[e._v("isEmpty() : 判断集合是否为空")]),e._v(" "),v("li",[e._v("iterator() : 返回一个迭代器")]),e._v(" "),v("li",[e._v("containsAll(Collection c) : 查找集合中是否有集合c中的元素")]),e._v(" "),v("li",[e._v("addAll(Collection c) : 将集合c中所有的元素添加给该集合")]),e._v(" "),v("li",[e._v("clear() : 删除集合中所有元素")]),e._v(" "),v("li",[e._v("removeAll(Collection c) : 从集合中删除c集合中也有的元素")]),e._v(" "),v("li",[e._v("retainAll(Collection c) : 从集合中删除集合c中不包含的元素")])]),e._v(" "),v("h3",{attrs:{id:"list"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" List")]),e._v(" "),v("p",[e._v("list主要方法：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("List<Integer> path = new ArrayList<>()")]),e._v(" 初始化")]),e._v(" "),v("li",[v("code",[e._v("new ArrayList<>(path)")]),e._v(" 复制")]),e._v(" "),v("li",[e._v("add(int index,Object element) 在指定位置上添加一个对象")]),e._v(" "),v("li",[e._v("addAll(int index, Collection c) 将集合c的元素添加到指定的位置")]),e._v(" "),v("li",[e._v("get(int index)返回List中指定位置的元素")]),e._v(" "),v("li",[e._v("indexOf(Object o)返回第一个出现元素o的位置.")]),e._v(" "),v("li",[e._v("remove(int index)删除指定位置的元素")]),e._v(" "),v("li",[v("code",[e._v("set(int index, Object element)")]),e._v(": 用元素element取代位置index上的元素,返回被取代的元素")]),e._v(" "),v("li",[e._v("sort()")])]),e._v(" "),v("h3",{attrs:{id:"stack"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[e._v("#")]),e._v(" Stack")]),e._v(" "),v("ul",[v("li",[e._v("push和pop")]),e._v(" "),v("li",[e._v("peek: 得到栈顶的元素")]),e._v(" "),v("li",[e._v("empty: 测试堆栈是否为空")]),e._v(" "),v("li",[e._v("search方法检测一个元素在堆栈中的位置")])]),e._v(" "),v("h3",{attrs:{id:"set"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" Set")]),e._v(" "),v("p",[e._v("不包含重复的元素")]),e._v(" "),v("ul",[v("li",[e._v("HashSet")]),e._v(" "),v("li",[e._v("SortSet\n"),v("ul",[v("li",[e._v("TreeSet")])])])]),e._v(" "),v("p",[e._v("另外：Queue(继承collection) -- Deque")]),e._v(" "),v("h2",{attrs:{id:"map"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[e._v("#")]),e._v(" Map")]),e._v(" "),v("p",[e._v("算法题一般使用"),v("code",[e._v("HashMap、TreeMap")]),e._v("就够了")]),e._v(" "),v("p",[e._v("常用方法：")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("put(K key, V value)")]),e._v("：添加元素")]),e._v(" "),v("li",[v("code",[e._v("putAll(Map<? extends K,? extends V> m)")]),e._v("：向map集合中添加指定集合的所有元素")]),e._v(" "),v("li",[e._v("clear()：把map集合中所有的键值删除")]),e._v(" "),v("li",[v("code",[e._v("containsKey(Object key)")]),e._v("：是否包含Key为key的元素")]),e._v(" "),v("li",[e._v("containsValue(Object value)：检出map集合中有没有包含Value为value的元素")]),e._v(" "),v("li",[v("code",[e._v("Set<Map.Entry<K,V>> entrySet()")]),e._v("：返回map到一个Set集合中，以map集合中的Key=Value的形式返回到set中。\n遍历时使用: "),v("code",[e._v("for (Map.Entry<Integer,Integer> entry: map.entrySet()) {map.getKey(); map.getValue();}")])]),e._v(" "),v("li",[e._v("equals(Object o): 判断两个Set集合的元素是否相同")]),e._v(" "),v("li",[e._v("get(Object key): 根据map集合中元素的Key来获取相应元素的Value")]),e._v(" "),v("li",[e._v("isEmpty(): 检出map集合中是否有元素")]),e._v(" "),v("li",[v("code",[e._v("Set<K> keySet()")]),e._v(": 返回map集合中所有Key")]),e._v(" "),v("li",[e._v("remove(Object key): 删除Key为key值的元素")]),e._v(" "),v("li",[e._v("size(): 返回map集合中元素个数")]),e._v(" "),v("li",[v("code",[e._v("Collection<V> values()")]),e._v(": 返回map集合中所有的Value到一个Collection集合")])]),e._v(" "),v("h3",{attrs:{id:"hashmap"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[e._v("#")]),e._v(" HashMap")]),e._v(" "),v("p",[e._v("TODO")]),e._v(" "),v("h3",{attrs:{id:"treemap"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[e._v("#")]),e._v(" TreeMap")]),e._v(" "),v("p",[e._v("TODO")]),e._v(" "),v("h2",{attrs:{id:"priority-queue"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#priority-queue"}},[e._v("#")]),e._v(" priority_queue")]),e._v(" "),v("p",[e._v("TODO")])])}),[],!1,null,null,null);t.default=_.exports}}]);