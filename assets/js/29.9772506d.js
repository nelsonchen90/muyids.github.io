(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{459:function(t,e,a){"use strict";a.r(e);var r=a(42),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"坐标型动态规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#坐标型动态规划"}},[t._v("#")]),t._v(" 坐标型动态规划")]),t._v(" "),a("ul",[a("li",[t._v("坐标记录状态")]),t._v(" "),a("li",[t._v("可以用滚动数组进行空间优化")])]),t._v(" "),a("h2",{attrs:{id:"题目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[t._v("#")]),t._v(" 题目")]),t._v(" "),a("h3",{attrs:{id:"一维坐标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一维坐标"}},[t._v("#")]),t._v(" 一维坐标")]),t._v(" "),a("p",[t._v("硬币组合: 足够的2，5，7面值的硬币，问最少用多少个硬币能组合出面值27（有多少种方式凑出面值27）")]),t._v(" "),a("p",[t._v("f(i) 表示凑出i元所有的最少硬币数（凑出i元的方案数）")]),t._v(" "),a("ul",[a("li",[a("p",[a("RouterLink",{attrs:{to:"/alg/dp/problems/501-600/518.coin-change-2.html"}},[t._v("LeetCode 518. Coin Change 2 (medium)")])],1)]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试题46. 把数字翻译成字符串"),a("OutboundLink")],1)])])]),t._v(" "),a("h3",{attrs:{id:"二维坐标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二维坐标"}},[t._v("#")]),t._v(" 二维坐标")]),t._v(" "),a("p",[t._v("不同路径：在一个二维棋盘中，机器人从左上角走到右下角，有多少种走法")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/alg/dp/problems/1-100/64.minimum-path-sum.html"}},[t._v("LeetCode 64. Minimum Path Sum (medium)")])],1)]),t._v(" "),a("h3",{attrs:{id:"炸弹袭击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#炸弹袭击"}},[t._v("#")]),t._v(" 炸弹袭击")]),t._v(" "),a("p",[t._v("二维矩阵中的格子为空，敌人，墙，炸弹可以放在任意空地上，炸弹会杀死同一行和同一列没有墙阻隔的敌人；问一个炸弹杀死的最大敌人数")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.lintcode.com/problem/bomb-enemy/",target:"_blank",rel:"noopener noreferrer"}},[t._v("领扣553. 炸弹袭击"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("算法思路：")]),t._v(" "),a("ul",[a("li",[t._v("记录dp[i][j][0,1,2,3]分别为向四个方向能炸死的敌人数目")]),t._v(" "),a("li",[t._v("从四个方向，做差分，记录每个位置在此方向上能够炸死的敌人数目")]),t._v(" "),a("li",[t._v("四个方向求和，迭代得最大值")])]),t._v(" "),a("h3",{attrs:{id:"最长序列（属于坐标型动态规划）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最长序列（属于坐标型动态规划）"}},[t._v("#")]),t._v(" 最长序列（属于坐标型动态规划）")]),t._v(" "),a("p",[t._v("最长上升子序列(LIS)（力扣300）一维坐标")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/alg/dp/problems/201-300/300.longest-increasing-subsequence.html"}},[t._v("LeetCode 300. Longest Increasing Subsequence (medium)")])],1)]),t._v(" "),a("p",[t._v("最长公共子序列(LCS)（力扣1143）二维坐标")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/alg/dp/problems/1101-1200/1143.longest-common-subsequence.html"}},[t._v("LeetCode 1143. Longest Common Subsequence (medium)")])],1)]),t._v(" "),a("h3",{attrs:{id:"图形问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图形问题"}},[t._v("#")]),t._v(" 图形问题")]),t._v(" "),a("p",[t._v("根据棋盘中图形的性质，通过相邻坐标的状态，进行推导")]),t._v(" "),a("h4",{attrs:{id:"矩形统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#矩形统计"}},[t._v("#")]),t._v(" 矩形统计")]),t._v(" "),a("ul",[a("li",[a("p",[a("RouterLink",{attrs:{to:"/alg/dp/problems/201-300/221.maximal-square.html"}},[t._v("LeetCode 221. Maximal Square (medium)")])],1)]),t._v(" "),a("li",[a("p",[a("RouterLink",{attrs:{to:"/alg/dp/problems/1201-1300/1277.count-square-submatrices-with-all-ones.html"}},[t._v("LeetCode 1277. Count Square Submatrices with All Ones (medium)")])],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);