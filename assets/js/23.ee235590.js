(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{447:function(t,e,r){"use strict";r.r(e);var a=r(42),i=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"划分型动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#划分型动态规划"}},[t._v("#")]),t._v(" 划分型动态规划")]),t._v(" "),r("p",[t._v("给定长度为N的序列，要求划分为若干段")]),t._v(" "),r("ul",[r("li",[t._v("段数不限，或指定K段")]),t._v(" "),r("li",[t._v("每一段满足一定的性质（最小代价，能不能等）")])]),t._v(" "),r("p",[t._v("做法：")]),t._v(" "),r("ul",[r("li",[t._v("类似于序列型动态规划，但是通常要加上段数信息")]),t._v(" "),r("li",[t._v("一般用"),r("code",[t._v("f[i + 1][k]")]),t._v("来记录前i个元素（元素0~i-1,f[0][k]表示空序列）分成k段的性质，如最小代价")]),t._v(" "),r("li",[t._v("关注最后一段，枚举最后一段可能情况 + 前面序列, 求最优策略")])]),t._v(" "),r("p",[t._v("注意：划分型动态规划每一段序列一定是连续的")]),t._v(" "),r("h2",{attrs:{id:"数字规律一类题目（一维坐标）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数字规律一类题目（一维坐标）"}},[t._v("#")]),t._v(" 数字规律一类题目（一维坐标）")]),t._v(" "),r("p",[t._v("把一个完整的数字分成几个，满足一定的性质")]),t._v(" "),r("ul",[r("li",[r("p",[r("RouterLink",{attrs:{to:"/alg/dp/problems/201-300/279.perfect-squares.html"}},[t._v("LeetCode 279. Perfect Squares (medium)")])],1)]),t._v(" "),r("li",[r("p",[r("RouterLink",{attrs:{to:"/alg/dp/problems/301-400/343.integer-break.html"}},[t._v("LeetCode 343. Integer Break (medium)")])],1)])]),t._v(" "),r("p",[t._v("此类问题往往也可以用完全背包模型去解决")]),t._v(" "),r("h2",{attrs:{id:"解码方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解码方法"}},[t._v("#")]),t._v(" 解码方法")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/alg/dp/problems/1-100/91.decode-ways.html"}},[t._v("LeetCode 91. Decode Ways (medium)")])],1)]),t._v(" "),r("h2",{attrs:{id:"分割回文串"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分割回文串"}},[t._v("#")]),t._v(" 分割回文串")]),t._v(" "),r("ul",[r("li",[r("p",[r("RouterLink",{attrs:{to:"/alg/dp/problems/101-200/132.palindrome-partitioning-ii.html"}},[t._v("LeetCode 132. Palindrome Partitioning II (hard)")])],1)]),t._v(" "),r("li",[r("p",[r("RouterLink",{attrs:{to:"/alg/dp/problems/1201-1300/1278.palindrome-partitioning-iii.html"}},[t._v("LeetCode 1278. Palindrome Partitioning III (hard)")])],1)])]),t._v(" "),r("h2",{attrs:{id:"抄写书籍（领扣437）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抄写书籍（领扣437）"}},[t._v("#")]),t._v(" 抄写书籍（领扣437）")]),t._v(" "),r("p",[t._v("N本书，每本有A[i]页；K个抄写员，每个抄写员可以抄连续的几本书；抄写员抄写速度一样；问最少需要多长时间抄写完毕。")]),t._v(" "),r("p",[t._v("可以用贪心，动态规划更通用，如果稍微变形，贪心就不可以用了")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/alg/dp/problems/401-500/410.split-array-largest-sum.html"}},[t._v("LeetCode 410. Split Array Largest Sum (hard)")])],1)]),t._v(" "),r("h2",{attrs:{id:"鸡蛋掉落"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#鸡蛋掉落"}},[t._v("#")]),t._v(" 鸡蛋掉落")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/alg/dp/problems/801-900/887.super-egg-drop.html"}},[t._v("LeetCode 887. Super Egg Drop (hard)")])],1)])])}),[],!1,null,null,null);e.default=i.exports}}]);