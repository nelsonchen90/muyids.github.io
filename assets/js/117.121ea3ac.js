(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{524:function(_,v,t){"use strict";t.r(v);var r=t(42),e=Object(r.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"思维导图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思维导图"}},[_._v("#")]),_._v(" 思维导图")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://processon.com/chart_image/5ed85e2ce0b34d4139fc4c57.png",alt:"分布式ID系统设计-思维导图"}})]),_._v(" "),t("p",[t("a",{attrs:{href:"https://www.processon.com/view/link/5ed905426376891862180c6d",target:"_blank",rel:"noopener noreferrer"}},[_._v("源文件地址"),t("OutboundLink")],1)]),_._v(" "),t("h2",{attrs:{id:"业务场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务场景"}},[_._v("#")]),_._v(" 业务场景")]),_._v(" "),t("p",[_._v("业务系统对于ID的要求有哪些？")]),_._v(" "),t("ul",[t("li",[_._v("全局唯一性：不能出现重复的ID号，既然是唯一标识，这是最基本的要求。")]),_._v(" "),t("li",[_._v("趋势递增：在"),t("code",[_._v("MySQL InnoDB")]),_._v("引擎中使用的是 "),t("strong",[_._v("聚集索引")]),_._v("，由于多数"),t("code",[_._v("RDBMS")]),_._v("使用"),t("code",[_._v("B-tree")]),_._v("的数据结构来存储索引数据，在主键的选择上面我们应该尽量使用"),t("strong",[_._v("有序的主键")]),_._v("保证写入性能。")]),_._v(" "),t("li",[_._v("单调递增：保证下一个ID一定大于上一个ID，例如事务版本号、IM增量消息、排序等特殊需求。")]),_._v(" "),t("li",[_._v("信息安全：如果ID是连续的，恶意用户的扒取工作就非常容易做了，直接按照顺序下载指定URL即可；如果是订单号就更危险了，竞对可以直接知道我们一天的单量。所以在一些应用场景下，会需要ID无规则、不规则。")])]),_._v(" "),t("h2",{attrs:{id:"性能要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能要求"}},[_._v("#")]),_._v(" 性能要求")]),_._v(" "),t("p",[_._v("如果ID生成系统瘫痪，整个系统的无法获取新生成ID号，业务系统会面临崩溃")]),_._v(" "),t("p",[_._v("因此ID系统在保证 "),t("strong",[_._v("ID号码满足自身的要求")]),_._v(" 同时，还需要满足以下性能要求")]),_._v(" "),t("ol",[t("li",[_._v("平均延迟和TP999延迟都要尽可能低")]),_._v(" "),t("li",[_._v("可用性5个9")]),_._v(" "),t("li",[_._v("高QPS")])]),_._v(" "),t("h2",{attrs:{id:"业内方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业内方案"}},[_._v("#")]),_._v(" 业内方案")]),_._v(" "),t("p",[_._v("9种分布式ID解决方案：")]),_._v(" "),t("ol",[t("li",[_._v("数据库自增ID\n"),t("ul",[t("li",[_._v("读写瓶颈")]),_._v(" "),t("li",[_._v("单点故障风险大")])])]),_._v(" "),t("li",[_._v("UUID随机数\n"),t("ul",[t("li",[_._v("长度过长")]),_._v(" "),t("li",[_._v("无序性")])])]),_._v(" "),t("li",[_._v("雪花算法（SnowFlake）\n"),t("ul",[t("li",[_._v("时钟回拨问题")]),_._v(" "),t("li",[_._v("workId相同造成id冲突")])])]),_._v(" "),t("li",[_._v("数据库多主模式\n"),t("ul",[t("li",[_._v("集群的扩展问题")]),_._v(" "),t("li",[_._v("未从根本上解决高并发的性能问题")])])]),_._v(" "),t("li",[_._v("号段模式\n"),t("ul",[t("li",[_._v("通过预分配号段的方式，减小了DB的压力，解决了并发场景的性能问题")]),_._v(" "),t("li",[_._v("采用版本号乐观锁的方式更新，保证了并发场景下数据的准确性")])])]),_._v(" "),t("li",[_._v("Redis\n"),t("ul",[t("li",[_._v("通过incr命令实现ID的原子性自增")]),_._v(" "),t("li",[_._v("redis持久化问题\n"),t("ul",[t("li",[_._v("RDB：持久化不及时，重启后出现ID重复")]),_._v(" "),t("li",[_._v("AOF：重启恢复数据时间过长")])])])])]),_._v(" "),t("li",[_._v("滴滴出品（TinyID）\n"),t("ul",[t("li",[_._v("基于号段模式")])])]),_._v(" "),t("li",[_._v("百度 （Uidgenerator）\n"),t("ul",[t("li",[_._v("支持自定义时间戳、工作机器ID和序列号等各部分的位数")]),_._v(" "),t("li",[_._v("支持用户自定义workId的生成策略，应用每次启动消费一个workId")])])]),_._v(" "),t("li",[_._v("美团（Leaf）\n"),t("ul",[t("li",[_._v("同时支持号段模式和snowflake算法模式")]),_._v(" "),t("li",[_._v("snowflake模式依赖ZooKeeper解决了时钟回拨问题")])])])]),_._v(" "),t("p",[_._v("我们主要讲下前三种，以及外研基于"),t("code",[_._v("号段模式")]),_._v("实现的分布式ID系统")]),_._v(" "),t("h2",{attrs:{id:"数据库自增id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据库自增id"}},[_._v("#")]),_._v(" 数据库自增ID")]),_._v(" "),t("p",[_._v("以MySQL举例，利用给字段设置"),t("code",[_._v("auto_increment_increment")]),_._v("和"),t("code",[_._v("auto_increment_offset")]),_._v("来保证ID自增。")]),_._v(" "),t("h3",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[_._v("#")]),_._v(" 优点")]),_._v(" "),t("ul",[t("li",[_._v("非常简单，利用现有数据库系统的功能实现，成本小，有DBA专业维护。")]),_._v(" "),t("li",[_._v("ID号单调自增，可以实现一些对ID有特殊要求的业务。")])]),_._v(" "),t("h3",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[_._v("#")]),_._v(" 缺点")]),_._v(" "),t("ul",[t("li",[_._v("强依赖DB，当DB异常时整个系统不可用，属于致命问题。\n"),t("ul",[t("li",[_._v("配置主从复制可以尽可能的增加可用性，但是数据一致性在特殊情况下难以保证。")]),_._v(" "),t("li",[_._v("主从切换时的不一致可能会导致重复发号。")])])]),_._v(" "),t("li",[_._v("ID发号性能瓶颈限制在单台MySQL的读写性能。")])]),_._v(" "),t("p",[_._v("对于MySQL性能问题，可用如下方案解决：")]),_._v(" "),t("p",[_._v("在分布式系统中我们可以多部署几台机器，每台机器设置不同的初始值，且步长和机器数相等。\n比如有两台机器，设置步长step为2，TicketServer1的初始值为1（1，3，5，7，9，11…）、TicketServer2的初始值为2（2，4，6，8，10…）")]),_._v(" "),t("h2",{attrs:{id:"uuid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uuid"}},[_._v("#")]),_._v(" UUID")]),_._v(" "),t("p",[t("code",[_._v("UUID(Universally Unique Identifier)")]),_._v("的标准型式包含32个16进制数字，以连字号分为五段，形式为8-4-4-4-12的36个字符")]),_._v(" "),t("p",[_._v("示例："),t("code",[_._v("550e8400-e29b-41d4-a716-446655440000")])]),_._v(" "),t("p",[_._v("优点：")]),_._v(" "),t("ul",[t("li",[_._v("性能非常高：本地生成，没有网络消耗。")])]),_._v(" "),t("p",[_._v("缺点：")]),_._v(" "),t("ul",[t("li",[_._v("不易于存储：UUID太长，16字节128位，通常以36长度的字符串表示，很多场景不适用。")]),_._v(" "),t("li",[_._v("信息不安全：基于MAC地址生成UUID的算法可能会造成MAC地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。")]),_._v(" "),t("li",[_._v("ID作为主键时在特定的环境会存在一些问题，比如做DB主键的场景下，UUID就非常不适用：")])]),_._v(" "),t("p",[t("strong",[_._v("MySQL官方有明确的建议主键要尽量越短越好，36个字符长度的UUID不符合要求。")])]),_._v(" "),t("h3",{attrs:{id:"优点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[_._v("#")]),_._v(" 优点")]),_._v(" "),t("ul",[t("li",[_._v("性能非常高：本地生成，没有网络消耗。")])]),_._v(" "),t("h3",{attrs:{id:"缺点-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[_._v("#")]),_._v(" 缺点")]),_._v(" "),t("ul",[t("li",[_._v("不易于存储：UUID太长，16字节128位，通常以36长度的字符串表示，很多场景不适用。")]),_._v(" "),t("li",[_._v("信息不安全：基于MAC地址生成UUID的算法可能会造成MAC地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。")]),_._v(" "),t("li",[_._v("ID作为主键时在特定的环境会存在一些问题，比如做DB主键的场景下，UUID就非常不适用：")])]),_._v(" "),t("h2",{attrs:{id:"雪花算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#雪花算法"}},[_._v("#")]),_._v(" 雪花算法")]),_._v(" "),t("p",[_._v("自然界中并不存在两片完全一样的雪花")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/snow-flake-bc.jpg",alt:"自然界中并不存在两片完全一样的雪花"}})]),_._v(" "),t("p",[t("code",[_._v("雪花算法")]),_._v("正如其名字，表示生成的ID如雪花般独一无二")]),_._v(" "),t("h3",{attrs:{id:"工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[_._v("#")]),_._v(" 工作原理")]),_._v(" "),t("p",[_._v("是一种以划分命名空间（UUID也算，由于比较常见，所以单独分析）来生成ID的一种算法")]),_._v(" "),t("p",[_._v("以"),t("code",[_._v("Twitter Snowflake")]),_._v("为例，生成的数据为64bit的long型数据，在数据库中应该用大于等于64bit的数字类型的字段来保存该值，比如在MySQL中应该使用BIGINT。")]),_._v(" "),t("h3",{attrs:{id:"snowflake-id结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#snowflake-id结构"}},[_._v("#")]),_._v(" Snowflake-ID结构")]),_._v(" "),t("p",[t("code",[_._v("Twitter Snowflake")]),_._v("的"),t("code",[_._v("64-bit")]),_._v("结构")]),_._v(" "),t("ul",[t("li",[_._v("E1-bit reserved，1bit，置为0；")]),_._v(" "),t("li",[_._v("E41-bit timestamp，41bit，表示从系统初始时间到现在的毫秒数, 可以用大概69年；"),t("code",[_._v("2 ^ 41 / 365 / 24 / 3600 / 1000 = 69.73")]),_._v("；")]),_._v(" "),t("li",[_._v("E10-bit machine id，10bit，这个机器id每个业务要唯一; "),t("a",{attrs:{href:"#%E6%9C%BA%E5%99%A8id%E8%8E%B7%E5%8F%96%E7%9A%84%E7%AD%96%E7%95%A5"}},[_._v("机器id获取的策略后面会详述")]),_._v(";")]),_._v(" "),t("li",[_._v("E12-bit sequence，12bit，每台机器每毫秒最多产生4096个id，超过这个数的话会等到下一毫秒")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/snow-flake-64-bit.jpg",alt:"雪花算法"}})]),_._v(" "),t("h3",{attrs:{id:"优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优势"}},[_._v("#")]),_._v(" 优势")]),_._v(" "),t("ul",[t("li",[_._v("毫秒数在高位，自增序列在低位，整个ID都是趋势递增的。")]),_._v(" "),t("li",[_._v("不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的。")]),_._v(" "),t("li",[_._v("可以根据自身业务特性分配bit位，非常灵活。")])]),_._v(" "),t("h3",{attrs:{id:"弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#弊端"}},[_._v("#")]),_._v(" 弊端")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("依赖机器时钟")]),_._v("，如果机器 "),t("strong",[_._v("时钟回拨")]),_._v(" ，会导致发号重复或者服务会处于不可用状态。（严重缺陷）")]),_._v(" "),t("li",[_._v("不能在一台服务器上部署多个分布式ID服务；(算不上缺陷，可以避免)")])]),_._v(" "),t("h3",{attrs:{id:"应用举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用举例"}},[_._v("#")]),_._v(" 应用举例")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.mongodb.com/manual/reference/method/ObjectId/#description",target:"_blank",rel:"noopener noreferrer"}},[_._v("MongoDB官方文档 ObjectID"),t("OutboundLink")],1),_._v(" "),t("ul",[t("li",[_._v("24长度的十六进制字符："),t("strong",[_._v("时间+机器码+pid+inc")]),_._v("（4+3+2+3）共12个字节")])])]),_._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/apache/shardingsphere#shardingsphere-jdbc",target:"_blank",rel:"noopener noreferrer"}},[_._v("shardingsphere-jdbc"),t("OutboundLink")],1),_._v(" "),t("ul",[t("li",[_._v("基于雪花算法实现，未解决"),t("code",[_._v("时钟回拨")]),_._v("问题")])])]),_._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/baidu/uid-generator",target:"_blank",rel:"noopener noreferrer"}},[_._v("百度自研uid-generator"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/Meituan-Dianping/Leaf",target:"_blank",rel:"noopener noreferrer"}},[_._v("美团自研Leaf"),t("OutboundLink")],1)])]),_._v(" "),t("h3",{attrs:{id:"实际业务场景案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实际业务场景案例"}},[_._v("#")]),_._v(" 实际业务场景案例")]),_._v(" "),t("p",[t("strong",[_._v("雪花算法二次改造案例")]),_._v("，引自"),t("code",[_._v("58沈剑《架构师之路》系列")])]),_._v(" "),t("p",[_._v("假设某公司ID生成器服务的需求如下：")]),_._v(" "),t("ol",[t("li",[_._v("单机高峰并发量小于1W，预计未来5年单机高峰并发量小于10W")]),_._v(" "),t("li",[_._v("有两个机房，预计未来5年机房数量小于4个")]),_._v(" "),t("li",[_._v("每个机房机器数小于100台")]),_._v(" "),t("li",[_._v("目前有5个业务线有ID生成需求，预计未来业务线数量小于10个")]),_._v(" "),t("li",[_._v("。。。")])]),_._v(" "),t("p",[_._v("分析过程如下：")]),_._v(" "),t("ul",[t("li",[_._v("高位取从"),t("strong",[_._v("系统ID生成器服务上线")]),_._v("到现在的毫秒数，假设系统至少运行10年，那至少需要10年"),t("em",[_._v("365天")]),_._v("24小时"),t("em",[_._v("3600秒")]),_._v("1000毫秒=320*10^9，差不多预留39bit给毫秒数")]),_._v(" "),t("li",[_._v("每秒的单机高峰并发量小于10W，即平均每毫秒的单机高峰并发量小于100，差不多预留7bit给每毫秒内序列号")]),_._v(" "),t("li",[_._v("5年内机房数小于4个，预留2bit给机房标识")]),_._v(" "),t("li",[_._v("每个机房小于100台机器，预留7bit给每个机房内的服务器标识")]),_._v(" "),t("li",[_._v("业务线小于10个，预留4bit给业务线标识")])]),_._v(" "),t("p",[_._v("这样设计的64bit标识，可以保证：")]),_._v(" "),t("ul",[t("li",[_._v("每个业务线、每个机房、每个机器生成的ID都是不同的")]),_._v(" "),t("li",[_._v("同一个机器，每个毫秒内生成的ID都是不同的")]),_._v(" "),t("li",[_._v("同一个机器，同一个毫秒内，以序列号区区分保证生成的ID是不同的")]),_._v(" "),t("li",[_._v("将毫秒数放在最高位，保证生成的ID是趋势递增的")])]),_._v(" "),t("h2",{attrs:{id:"外研分布式id服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外研分布式id服务"}},[_._v("#")]),_._v(" 外研分布式ID服务")]),_._v(" "),t("h3",{attrs:{id:"思维导图-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思维导图-2"}},[_._v("#")]),_._v(" 思维导图")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/fltrp-id-service.png",alt:"外研分布式ID服务-思维导图"}})]),_._v(" "),t("h3",{attrs:{id:"场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[_._v("#")]),_._v(" 场景")]),_._v(" "),t("p",[_._v("对外提供全局独立唯一ID")]),_._v(" "),t("ul",[t("li",[_._v("支持单个、批量不同数量的ID获取")]),_._v(" "),t("li",[_._v("支持单调递增、趋势递增不同特性的ID获取")])]),_._v(" "),t("h3",{attrs:{id:"业务流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务流程"}},[_._v("#")]),_._v(" 业务流程")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://muyids.oss-cn-beijing.aliyuncs.com/id-only_flowchart.png",alt:"业务流程图"}})]),_._v(" "),t("h3",{attrs:{id:"核心服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心服务"}},[_._v("#")]),_._v(" 核心服务")]),_._v(" "),t("ol",[t("li",[_._v("id发号器")]),_._v(" "),t("li",[_._v("id池定时轮询器")])]),_._v(" "),t("h3",{attrs:{id:"存储设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储设计"}},[_._v("#")]),_._v(" 存储设计")]),_._v(" "),t("p",[_._v("应用配置存储（支持高性能查询）+ 缓存id池（支持高性能读取、写入）")]),_._v(" "),t("h4",{attrs:{id:"应用配置存储设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用配置存储设计"}},[_._v("#")]),_._v(" 应用配置存储设计")]),_._v(" "),t("p",[_._v("mysql存储 + redis缓存优化读取性能，注意 数据一致性")]),_._v(" "),t("h4",{attrs:{id:"缓存id池设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存id池设计"}},[_._v("#")]),_._v(" 缓存id池设计")]),_._v(" "),t("p",[_._v("id池要实现高性能读取和写入，我们选择了redis作为底层数据存储")]),_._v(" "),t("p",[_._v("对于数据结构选择，redis常用容器类型有hash、list、set、zset，选择哪一个更为合适呢")]),_._v(" "),t("p",[_._v("考虑到要支持"),t("strong",[_._v("单调递增模式")]),_._v("，严格要求顺序性，list和zset都能实现顺序性，究竟该选择哪一个？")]),_._v(" "),t("p",[_._v("我们知道zset可以根据权值实现顺序性，但是其底层实现为跳表，其查询、插入、删除的时间复杂度为O(logn)，不满足我们对高性能的要求，故选择list")]),_._v(" "),t("h5",{attrs:{id:"发号策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发号策略"}},[_._v("#")]),_._v(" 发号策略")]),_._v(" "),t("p",[_._v("list中维护了从小到大的预生成ID队列，遵循"),t("code",[_._v("FIFO")]),_._v("规则，不管是单个还是批量，直接从队头获取")]),_._v(" "),t("h5",{attrs:{id:"更新策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新策略"}},[_._v("#")]),_._v(" 更新策略")]),_._v(" "),t("p",[_._v("我们使用"),t("strong",[_._v("号段模式")]),_._v("作为id的生成方式，每次从 currentOffset 算法生成 满足 单调递增or趋势递增的ID序列，执行入队操作")]),_._v(" "),t("ul",[t("li",[_._v("单调递增：不定增率，有序入队")]),_._v(" "),t("li",[_._v("趋势递增：增率为1，shuffle后入队")])]),_._v(" "),t("p",[_._v("入队操作完成后，同步更新缓存配置，再异步更新db配置")]),_._v(" "),t("h5",{attrs:{id:"问题思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题思考"}},[_._v("#")]),_._v(" 问题思考")]),_._v(" "),t("p",[t("strong",[_._v("分布式场景下，缓存id池的写入操作，会不会造成重复发号、id池溢出等问题？")])]),_._v(" "),t("p",[_._v("必须配置"),t("strong",[_._v("分布式锁机制")]),_._v("，保证全局串行化，即某一时刻，只允许一个ID生成器的worker在工作")]),_._v(" "),t("p",[t("strong",[_._v("批量获取数量大于缓存池大小（缓存池被过度消费），如何处理？")])]),_._v(" "),t("ol",[t("li",[_._v("理论上不会出现这种情况\n"),t("ol",[t("li",[_._v("系统预留1分钟的最大秒并发数（目前默认5000），")]),_._v(" "),t("li",[_._v("定时任务每隔100ms扫描，低于最大池的80%，进行补充")])])]),_._v(" "),t("li",[_._v("如果异常发生，返回空；同时应触发"),t("strong",[_._v("报警机制")])])]),_._v(" "),t("h3",{attrs:{id:"web层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web层"}},[_._v("#")]),_._v(" web层")]),_._v(" "),t("p",[t("a",{attrs:{href:"http://wiki.ai.fltrp.im/id-only/API%E6%96%87%E6%A1%A3.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("接口文档"),t("OutboundLink")],1)]),_._v(" "),t("h3",{attrs:{id:"数据层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据层"}},[_._v("#")]),_._v(" 数据层")]),_._v(" "),t("p",[t("a",{attrs:{href:"http://wiki.ai.fltrp.im/id-only/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("表结构设计"),t("OutboundLink")],1)]),_._v(" "),t("h4",{attrs:{id:"应用表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用表示"}},[_._v("#")]),_._v(" 应用表示")]),_._v(" "),t("ul",[t("li",[_._v("appKey：应用的唯一key")]),_._v(" "),t("li",[_._v("appSecret：应用秘钥")]),_._v(" "),t("li",[_._v("appName：应用名称")])]),_._v(" "),t("h4",{attrs:{id:"id的增长方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#id的增长方式"}},[_._v("#")]),_._v(" ID的增长方式")]),_._v(" "),t("ul",[t("li",[_._v("趋势递增 trend")]),_._v(" "),t("li",[_._v("严格递增(单调递增) monotony")])]),_._v(" "),t("h4",{attrs:{id:"id的分配范围配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#id的分配范围配置"}},[_._v("#")]),_._v(" ID的分配范围配置")]),_._v(" "),t("ul",[t("li",[_._v("startOffset 初始化的id起始位置")]),_._v(" "),t("li",[_._v("step 每次向id池子增加的数量")]),_._v(" "),t("li",[_._v("currentOffset id的当前位置")])]),_._v(" "),t("h4",{attrs:{id:"缓存id池配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存id池配置"}},[_._v("#")]),_._v(" 缓存ID池配置")]),_._v(" "),t("ul",[t("li",[_._v("maxSizePerTimes 一次最大获取id量(默认1000)")]),_._v(" "),t("li",[_._v("maxSizePerSecond 1s最大获取量(秒级并发QPS，默认5000)")]),_._v(" "),t("li",[_._v("minSizePercent 触发添加的百分比上限（默认80%）")]),_._v(" "),t("li",[_._v("interval 循环添加间隔时间10ms（不可修改)")]),_._v(" "),t("li",[_._v("maxPoolSize id池的最大id存量（系统默认是"),t("code",[_._v("maxSizePerSecond")]),_._v("的"),t("code",[_._v("60")]),_._v("倍，为了保证"),t("code",[_._v("1分钟")]),_._v("不断供）")])]),_._v(" "),t("h3",{attrs:{id:"我们做到了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我们做到了"}},[_._v("#")]),_._v(" 我们做到了")]),_._v(" "),t("ul",[t("li",[_._v("一致性，服务端保证不会获取到重复的ID")]),_._v(" "),t("li",[_._v("两种递增方式支持，趋势递增+严格递增")]),_._v(" "),t("li",[_._v("高可用，短ID服务允许部署多套完全独立的环境，每个环境产生的ID都不一样，client可以failover到任何环境")]),_._v(" "),t("li",[_._v("高性能，每秒钟可以获取百万级的ID，并且不会出现阻塞")]),_._v(" "),t("li",[_._v("基于时间的大致有序，基本上获取到的ID会越来越大，无法保证严格有序，比如一小时前获取的ID应该会比一小时后的小")])]),_._v(" "),t("h3",{attrs:{id:"我们不支持"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#我们不支持"}},[_._v("#")]),_._v(" 我们不支持")]),_._v(" "),t("ul",[t("li",[_._v("没有实现严格自增长ID")]),_._v(" "),t("li",[_._v("无法保证每个ID都不浪费")])]),_._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[_._v("#")]),_._v(" 参考文档")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/twitter-archive/snowflake",target:"_blank",rel:"noopener noreferrer"}},[_._v("snowflake"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://www.ietf.org/rfc/rfc4122.txt",target:"_blank",rel:"noopener noreferrer"}},[_._v("A Universally Unique IDentifier (UUID) URN Namespace"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"http://code.flickr.net/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Ticket Servers: Distributed Unique Primary Keys on the Cheap"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/Meituan-Dianping/Leaf",target:"_blank",rel:"noopener noreferrer"}},[_._v("Leaf"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/baidu/uid-generator",target:"_blank",rel:"noopener noreferrer"}},[_._v("uid-generator"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=e.exports}}]);